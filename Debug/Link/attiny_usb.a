;/*
; * attiny_usb.c
; *
; * Created: 05.09.2016 23:56:04
; * Author: Vendein_RaZoR
; */
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x18
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x18
;PCODE: $00000007 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000008 VOL: 0
	#endif
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;#include <tiny85.h>
;#include "usb.c"
;// ======================================================================
;// USB driver
;//
;// Entry points:
;// 	usb_init()	- enable the USB interrupt
;// 	usb_poll()	- poll for incoming packets and process them
;//
;// This code communicates with the interrupt handler through a number of
;// global variables, including two input buffers and one output buffer.
;// Packets are queued for transmission by copying them into the output
;// buffer. The interrupt handler will transmit such a packet on the
;// reception of an IN packet.
;//
;// Standard SETUP packets are handled here. Non-standard SETUP packets
;// are forwarded to the application code by calling usb_setup(). The
;// macros USBTINY_CALLBACK_IN and USBTINY_CALLBACK_OUT control whether
;// the callback functions usb_in() and usb_out() will be called for IN
;// and OUT transfers.
;//
;// Maximum stack usage (gcc 4.1.0 & 4.3.4) of usb_poll(): 5 bytes plus
;// possible additional stack usage in usb_setup(), usb_in() or usb_out().
;//
;// Copyright 2006-2010 Dick Streefland
;//
;// This is free software, licensed under the terms of the GNU General
;// Public License as published by the Free Software Foundation.
;// ======================================================================
;
;#include <pgmspace.h>
;#include <interrupt.h>
;	flags -> R17

	.CSEG
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
	cli
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;//#include <tiny85.h>
;#include "def.h"
;#include "usb.h"
;
;#define	LE(word)			(word) & 0xff, (word) >> 8
;
;// ----------------------------------------------------------------------
;// typedefs
;// ----------------------------------------------------------------------
;
;#if	USBTINY_CALLBACK_IN == 2
;typedef	uint_t		txlen_t;
;#else
;typedef	byte_t		txlen_t;
;#endif
;
;// ----------------------------------------------------------------------
;// USB constants
;// ----------------------------------------------------------------------
;
;enum
;{
;	DESCRIPTOR_TYPE_DEVICE = 1,
;	DESCRIPTOR_TYPE_CONFIGURATION,
;	DESCRIPTOR_TYPE_STRING,
;	DESCRIPTOR_TYPE_INTERFACE,
;	DESCRIPTOR_TYPE_ENDPOINT,
;};
;
;// ----------------------------------------------------------------------
;// Interrupt handler interface
;// ----------------------------------------------------------------------
;
;#if	USBTINY_NO_DATA
;byte_t	tx_ack;				// ACK packet
;byte_t	tx_nak;				// NAK packet
;#else
;byte_t	tx_ack = USB_PID_ACK;		// ACK packet
;byte_t	tx_nak = USB_PID_NAK;		// NAK packet
;#endif
;
;byte_t	usb_rx_buf[2*USB_BUFSIZE];	// two input buffers
;byte_t	usb_rx_off;			// buffer offset: 0 or USB_BUFSIZE
;byte_t	usb_rx_len;			// buffer size, 0 means empty
;byte_t	usb_rx_token;			// PID of token packet: SETUP or OUT
;
;byte_t	usb_tx_buf[USB_BUFSIZE];	// output buffer
;byte_t	usb_tx_len;			// output buffer size, 0 means empty
;
;byte_t	usb_address;			// assigned device address
;byte_t	usb_new_address;		// new device address
;
;// ----------------------------------------------------------------------
;// Local data
;// ----------------------------------------------------------------------
;
;enum
;{
;	TX_STATE_IDLE = 0,		// transmitter idle
;	TX_STATE_RAM,			// usb_tx_data is a RAM address
;	TX_STATE_ROM,			// usb_tx_data is a ROM address
;	TX_STATE_CALLBACK,		// call usb_in() to obtain transmit data
;};
;
;static	byte_t	usb_tx_state;		// TX_STATE_*, see enum above
;static	txlen_t	usb_tx_total;		// total transmit size
;static	byte_t*	usb_tx_data;		// pointer to data to transmit
;
;#if	defined USBTINY_VENDOR_NAME
;struct
;{
;	byte_t	length;
;	byte_t	type;
;	int	string[sizeof(USBTINY_VENDOR_NAME)-1];
;}flash const	string_vendor =
;{
;	2 * sizeof(USBTINY_VENDOR_NAME),
;	DESCRIPTOR_TYPE_STRING,
;};
;#  define	VENDOR_NAME_ID	1
;#else
;#  define	VENDOR_NAME_ID	0
;#endif
;
;#if	defined USBTINY_DEVICE_NAME
;struct
;{
;	byte_t	length;
;	byte_t	type;
;	int	string[sizeof(USBTINY_DEVICE_NAME)-1];
;}flash const string_device = {2 * sizeof(USBTINY_DEVICE_NAME),DESCRIPTOR_TYPE_STRING,(int)USBTINY_DEVICE_NAME};
;#  define	DEVICE_NAME_ID	2
;#else
;#  define	DEVICE_NAME_ID	0
;#endif
;
;#if	defined USBTINY_SERIAL
;struct
;{
;	byte_t	length;
;	byte_t	type;
;	int	string[sizeof(USBTINY_SERIAL)-1];
;}	const	string_serial PROGMEM =
;{
;	2 * sizeof(USBTINY_SERIAL),
;	DESCRIPTOR_TYPE_STRING,
;	{ CAT2(L, USBTINY_SERIAL) }
;};
;#  define	SERIAL_ID	3
;#else
;#  define	SERIAL_ID	0
;#endif
;
;#if	VENDOR_NAME_ID || DEVICE_NAME_ID || SERIAL_ID
;flash static	byte_t	const	string_langid [] =
;{
;	4,				// bLength
;	DESCRIPTOR_TYPE_STRING,		// bDescriptorType (string)
;	LE(0x0409),			// wLANGID[0] (American English)
;};
;#endif
;
;// Device Descriptor
;flash static	byte_t	const	descr_device [18] =
;{
;	18,				// bLength
;	DESCRIPTOR_TYPE_DEVICE,		// bDescriptorType
;	LE(0x0101),			// bcdUSB
;	USBTINY_DEVICE_CLASS,		// bDeviceClass
;	USBTINY_DEVICE_SUBCLASS,	// bDeviceSubClass
;	USBTINY_DEVICE_PROTOCOL,	// bDeviceProtocol
;	8,				// bMaxPacketSize0
;	LE(USBTINY_VENDOR_ID),		// idVendor
;	LE(USBTINY_DEVICE_ID),		// idProduct
;	LE(USBTINY_DEVICE_VERSION),	// bcdDevice
;	VENDOR_NAME_ID,			// iManufacturer
;	DEVICE_NAME_ID,			// iProduct
;	SERIAL_ID,			// iSerialNumber
;	1,				// bNumConfigurations
;};
;
;// Configuration Descriptor
;flash static	byte_t	const	descr_config [] =
;{
;	9,				// bLength
;	DESCRIPTOR_TYPE_CONFIGURATION,	// bDescriptorType
;	LE(9+9+7*USBTINY_ENDPOINT),	// wTotalLength
;	1,				// bNumInterfaces
;	1,				// bConfigurationValue
;	0,				// iConfiguration
;	(USBTINY_MAX_POWER ? 0x80 : 0xc0), // bmAttributes
;	(USBTINY_MAX_POWER + 1) / 2,	// MaxPower
;
;	// Standard Interface Descriptor
;	9,				// bLength
;	DESCRIPTOR_TYPE_INTERFACE,	// bDescriptorType
;	0,				// bInterfaceNumber
;	0,				// bAlternateSetting
;	USBTINY_ENDPOINT,		// bNumEndpoints
;	USBTINY_INTERFACE_CLASS,	// bInterfaceClass
;	USBTINY_INTERFACE_SUBCLASS,	// bInterfaceSubClass
;	USBTINY_INTERFACE_PROTOCOL,	// bInterfaceProtocol
;	0,				// iInterface
;
;#if	USBTINY_ENDPOINT
;	// Additional Endpoint
;	7,				// bLength
;	DESCRIPTOR_TYPE_ENDPOINT,	// bDescriptorType
;	USBTINY_ENDPOINT_ADDRESS,	// bEndpointAddress
;	USBTINY_ENDPOINT_TYPE,		// bmAttributes
;	LE(8),				// wMaxPacketSize
;	USBTINY_ENDPOINT_INTERVAL,	// bInterval
;#endif
;};
;
;// ----------------------------------------------------------------------
;// Inspect an incoming packet.
;// ----------------------------------------------------------------------
;static	void	usb_receive ( byte_t* data, byte_t rx_len )
; 0000 000A {
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;	byte_t	len;
;	byte_t	type;
;	txlen_t	limit;
;
;	usb_tx_state = TX_STATE_RAM;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;	*data -> Y+5
;	rx_len -> Y+4
;	len -> R17
;	type -> R16
;	limit -> R19
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;	len = 0;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;	limit = 0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;	if	( usb_rx_token == USB_PID_SETUP )
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;	{
;#if	USBTINY_CALLBACK_IN == 2
;		limit = * (uint_t*) & data[6];
;#else
;		limit = data[6];
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;		if	( data[7] )
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;		{
;			limit = 255;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;		}
;#endif
;		type = data[0] & 0x60;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;		if	( type == 0x00 )
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;		{	// Standard request
;			if	( data[1] == 0 )	// GET_STATUS
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;			{
;				len = 2;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;#if	USBTINY_MAX_POWER == 0
;				data[0] = (data[0] == 0x80);
;#else
;				data[0] = 0;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;#endif
;				data[1] = 0;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;			}
;			else if	( data[1] == 5 )	// SET_ADDRESS
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;			{
;				usb_new_address = data[2];
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;#ifdef	USBTINY_USB_OK_LED
;				SET(USBTINY_USB_OK_LED);// LED on
;#endif
;			}
;			else if	( data[1] == 6 )	// GET_DESCRIPTOR
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;			{
;				usb_tx_state = TX_STATE_ROM;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;				if	( data[3] == 1 )
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;				{	// DEVICE
;					data = (byte_t*) &descr_device;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;					len = sizeof(descr_device);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;				}
;				else if	( data[3] == 2 )
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;				{	// CONFIGURATION
;					data = (byte_t*) &descr_config;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;					len = sizeof(descr_config);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;				}
;#if	VENDOR_NAME_ID || DEVICE_NAME_ID || SERIAL_ID
;				else if	( data[3] == 3 )
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;				{	// STRING
;					if	( data[2] == 0 )
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;					{
;						data = (byte_t*) &string_langid;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;						len = sizeof(string_langid);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;					}
;#if	VENDOR_NAME_ID
;					else if	( data[2] == VENDOR_NAME_ID )
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;					{
;						data = (byte_t*) &string_vendor;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;						len = sizeof(string_vendor);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;					}
;#endif
;#if	DEVICE_NAME_ID
;					else if ( data[2] == DEVICE_NAME_ID )
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;					{
;						data = (byte_t*) &string_device;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;						len = sizeof(string_device);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;					}
;#endif
;#if	SERIAL_ID
;					else if ( data[2] == SERIAL_ID )
;					{
;						data = (byte_t*) &string_serial;
;						len = sizeof(string_serial);
;					}
;#endif
;				}
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;#endif
;			}
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;			else if	( data[1] == 8 )	// GET_CONFIGURATION
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;			{
;				data[0] = 1;		// return bConfigurationValue
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;				len = 1;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;			}
;			else if	( data[1] == 10 )	// GET_INTERFACE
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;			{
;				data[0] = 0;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;				len = 1;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;			}
;		}
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;		else
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;		{	// Class or Vendor request
;			len = usb_setup( data );
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;#if	USBTINY_CALLBACK_IN
;			if	( len == 0xff )
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;			{
;				usb_tx_state = TX_STATE_CALLBACK;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;			}
;#endif
;		}
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;		if	(  len < limit
;#if	USBTINY_CALLBACK_IN == 2
;			&& len != 0xff
;#endif
;			)
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;		{
;			limit = len;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;		}
;		usb_tx_data = data;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;	}
;#if	USBTINY_CALLBACK_OUT
;	else if	( rx_len > 0 )
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;	{	// usb_rx_token == USB_PID_OUT
;		usb_out( data, rx_len );
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;	}
;#endif
;	usb_tx_total  = limit;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;	usb_tx_buf[0] = USB_PID_DATA0;	// next data packet will be DATA1
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;}
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;
;// ----------------------------------------------------------------------
;// Load the transmit buffer with the next packet.
;// ----------------------------------------------------------------------
;static	void	usb_transmit ( void )
;{
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;	byte_t	len;
;	byte_t*	src;
;	byte_t*	dst;
;	byte_t	i;
;	byte_t	b;
;
;	usb_tx_buf[0] ^= (USB_PID_DATA0 ^ USB_PID_DATA1);
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;	len -> R17
;	*src -> R18,R19
;	*dst -> R20,R21
;	i -> R16
;	b -> Y+6
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;	if	( usb_tx_total > 8 )
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;	{
;		len = 8;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;	}
;	else
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;	{
;		len = (byte_t) usb_tx_total;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;	}
;PCODE: $000000E6 VOL: 0
;	dst = usb_tx_buf + 1;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;	if	( len > 0 )
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;	{
;#if	USBTINY_CALLBACK_IN
;		if	( usb_tx_state == TX_STATE_CALLBACK )
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;		{
;			len = usb_in( dst, len );
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;		}
;		else
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;#endif
;		{
;			src = usb_tx_data;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;			if	( usb_tx_state == TX_STATE_RAM )
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;			{
;				for	( i = 0; i < len; i++ )
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;				{
;					*dst++ = *src++;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;				}
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;			}
;			else	// usb_tx_state == TX_STATE_ROM
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;			{
;				for	( i = 0; i < len; i++ )
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;				{
;					b = pgm_read_byte( src );
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;					src++;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;					*dst++ = b;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;				}
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;			}
;PCODE: $0000012D VOL: 0
;			usb_tx_data = src;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;		}
;PCODE: $00000130 VOL: 0
;		usb_tx_total -= len;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;	}
;	crc( usb_tx_buf + 1, len );
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;	usb_tx_len = len + 3;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;	if	( len < 8 )
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;	{	// this is the last packet
;		usb_tx_state = TX_STATE_IDLE;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;	}
;}
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;
;// ----------------------------------------------------------------------
;// Initialize the low-level USB driver.
;// ----------------------------------------------------------------------
;extern	void	usb_init ( void )
;{
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;	USB_INT_CONFIG |= USB_INT_CONFIG_SET;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;	USB_INT_ENABLE |= (1 << USB_INT_ENABLE_BIT);
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;#ifdef	USBTINY_USB_OK_LED
;	OUTPUT(USBTINY_USB_OK_LED);
;#endif
;#ifdef	USBTINY_DMINUS_PULLUP
;	SET(USBTINY_DMINUS_PULLUP);
;	OUTPUT(USBTINY_DMINUS_PULLUP);	// enable pullup on D-
;#endif
;#if	USBTINY_NO_DATA
;	tx_ack = USB_PID_ACK;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;	tx_nak = USB_PID_NAK;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;#endif
;	sei();
;PCODE: $00000153 VOL: 0
	sei
;PCODE: $00000154 VOL: 0
;}
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;
;// ----------------------------------------------------------------------
;// Poll USB driver:
;// - check for incoming USB packets
;// - refill an empty transmit buffer
;// - check for USB bus reset
;// ----------------------------------------------------------------------
;extern	void	usb_poll ( void )
;{
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;	byte_t	i;
;
;	// check for incoming USB packets
;	if	( usb_rx_len != 0 )
;PCODE: $00000159 VOL: 0
;	i -> R17
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;	{
;		usb_receive( usb_rx_buf + USB_BUFSIZE - usb_rx_off + 1, usb_rx_len - 3 );
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;		usb_tx_len = 0;	// abort pending transmission
;PCODE: $00000167 VOL: 0
;		usb_rx_len = 0;	// accept next packet
;PCODE: $00000168 VOL: 0
;	}
;	// refill an empty transmit buffer, when the transmitter is active
;	if	( usb_tx_len == 0 && usb_tx_state != TX_STATE_IDLE )
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;	{
;		usb_transmit();
;PCODE: $00000173 VOL: 0
;	}
;	// check for USB bus reset
;	for	( i = 10; i > 0 && ! (USB_IN & USB_MASK_DMINUS); i-- )
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;	{
;	}
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;	if	( i == 0 )
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;	{	// SE0 for more than 2.5uS is a reset
;		usb_new_address = 0;
;PCODE: $0000018C VOL: 0
;		usb_address = 0;
;PCODE: $0000018D VOL: 0
;#ifdef	USBTINY_USB_OK_LED
;		CLR(USBTINY_USB_OK_LED);	// LED off
;#endif
;	}
;}
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;
;byte_t		usb_setup ( byte_t data[8] )
; 0000 000D {
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 000E }
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;
;void		usb_out ( byte_t* data, byte_t len )
; 0000 0011 {
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 0012 }
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;
;byte_t		usb_in ( byte_t* data, byte_t len )
; 0000 0015 {
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 0016 
; 0000 0017 }
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;
;void		crc ( byte_t* data, byte_t len )
; 0000 001A {
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 001B #asm
;PCODE: $000001A2 VOL: 0
;	*data -> Y+1
;	len -> Y+0
;PCODE: $000001A3 VOL: 0
; 0000 001C {
{
;PCODE: $000001A4 VOL: 0
; 0000 001D ; ----------------------------------------------------------------------
; ----------------------------------------------------------------------
;PCODE: $000001A5 VOL: 0
; 0000 001E ; void crc(unsigned char *data, unsigned char len);
; void crc(unsigned char *data, unsigned char len);
;PCODE: $000001A6 VOL: 0
; 0000 001F ; ----------------------------------------------------------------------
; ----------------------------------------------------------------------
;PCODE: $000001A7 VOL: 0
; 0000 0020 #define    data    r24
#define    data    r24
;PCODE: $000001A8 VOL: 0
; 0000 0021 #define    len    r22
#define    len    r22
;PCODE: $000001A9 VOL: 0
; 0000 0022 

;PCODE: $000001AA VOL: 0
; 0000 0023 #define    b    r18
#define    b    r18
;PCODE: $000001AB VOL: 0
; 0000 0024 #define    con_01    r19
#define    con_01    r19
;PCODE: $000001AC VOL: 0
; 0000 0025 #define    con_a0    r20
#define    con_a0    r20
;PCODE: $000001AD VOL: 0
; 0000 0026 #define    crc_l    r24
#define    crc_l    r24
;PCODE: $000001AE VOL: 0
; 0000 0027 #define    crc_h    r25
#define    crc_h    r25
;PCODE: $000001AF VOL: 0
; 0000 0028 

;PCODE: $000001B0 VOL: 0
; 0000 0029    // .text
   // .text
;PCODE: $000001B1 VOL: 0
; 0000 002A     //.global    crc
    //.global    crc
;PCODE: $000001B2 VOL: 0
; 0000 002B    // .type    crc, @function
   // .type    crc, @function
;PCODE: $000001B3 VOL: 0
; 0000 002C crc:
crc:
;PCODE: $000001B4 VOL: 0
; 0000 002D     movw    r26, r24
    movw    r26, r24
;PCODE: $000001B5 VOL: 0
; 0000 002E     ldi    crc_h, 0xff
    ldi    crc_h, 0xff
;PCODE: $000001B6 VOL: 0
; 0000 002F 	ldi	crc_l, 0xff
	ldi	crc_l, 0xff
;PCODE: $000001B7 VOL: 0
; 0000 0030 	tst	len
	tst	len
;PCODE: $000001B8 VOL: 0
; 0000 0031 	breq	done1
	breq	done1
;PCODE: $000001B9 VOL: 0
; 0000 0032 	ldi	con_a0, 0xa0
	ldi	con_a0, 0xa0
;PCODE: $000001BA VOL: 0
; 0000 0033 	ldi	con_01, 0x01
	ldi	con_01, 0x01
;PCODE: $000001BB VOL: 0
; 0000 0034 next_byte:
next_byte:
;PCODE: $000001BC VOL: 0
; 0000 0035 	ld	b, X+
	ld	b, X+
;PCODE: $000001BD VOL: 0
; 0000 0036 	eor	crc_l, b
	eor	crc_l, b
;PCODE: $000001BE VOL: 0
; 0000 0037 	ldi	b, 8
	ldi	b, 8
;PCODE: $000001BF VOL: 0
; 0000 0038 next_bit:
next_bit:
;PCODE: $000001C0 VOL: 0
; 0000 0039 	lsr	crc_h
	lsr	crc_h
;PCODE: $000001C1 VOL: 0
; 0000 003A 	ror	crc_l
	ror	crc_l
;PCODE: $000001C2 VOL: 0
; 0000 003B 	brcc	noxor
	brcc	noxor
;PCODE: $000001C3 VOL: 0
; 0000 003C 	eor	crc_h, con_a0
	eor	crc_h, con_a0
;PCODE: $000001C4 VOL: 0
; 0000 003D 	eor	crc_l, con_01
	eor	crc_l, con_01
;PCODE: $000001C5 VOL: 0
; 0000 003E noxor:
noxor:
;PCODE: $000001C6 VOL: 0
; 0000 003F 	dec	b
	dec	b
;PCODE: $000001C7 VOL: 0
; 0000 0040 	brne	next_bit
	brne	next_bit
;PCODE: $000001C8 VOL: 0
; 0000 0041 	dec	len
	dec	len
;PCODE: $000001C9 VOL: 0
; 0000 0042 	brne	next_byte
	brne	next_byte
;PCODE: $000001CA VOL: 0
; 0000 0043 done1:
done1:
;PCODE: $000001CB VOL: 0
; 0000 0044 	com	crc_l
	com	crc_l
;PCODE: $000001CC VOL: 0
; 0000 0045 	com	crc_h
	com	crc_h
;PCODE: $000001CD VOL: 0
; 0000 0046 	st	X+, crc_l
	st	X+, crc_l
;PCODE: $000001CE VOL: 0
; 0000 0047 	st	X+, crc_h
	st	X+, crc_h
;PCODE: $000001CF VOL: 0
; 0000 0048 	ret
	ret
;PCODE: $000001D0 VOL: 0
; 0000 0049 }
}
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 004A #endasm
; 0000 004B }
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;
;void main(void)
; 0000 004E {
;PCODE: $000001D6 VOL: 0
; 0000 004F usb_init();
;PCODE: $000001D7 VOL: 0
; 0000 0050 while (1)
;PCODE: $000001D8 VOL: 0
; 0000 0051     {
; 0000 0052     // Please write your application code here
; 0000 0053   usb_poll();
;PCODE: $000001D9 VOL: 0
; 0000 0054     }
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 0055 }
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
