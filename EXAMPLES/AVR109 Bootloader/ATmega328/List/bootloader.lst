
AVRASM ver. 2.1.30  D:\Program Files\cvavr\EXAMPLES\AVR109 Bootloader\ATmega328\List\bootloader.asm Tue Feb 16 12:59:50 2016

D:\Program Files\cvavr\EXAMPLES\AVR109 Bootloader\ATmega328\List\bootloader.asm(1090): warning: Register r5 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega328P
                 ;Program type           : Boot Loader
                 ;Clock frequency        : 16,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': No
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _startup_delay_cnt=R5
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x3C00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
003c00 940c 3c3d 	JMP  __RESET
003c02 940c 3c00 	JMP  0x3C00
003c04 940c 3c00 	JMP  0x3C00
003c06 940c 3c00 	JMP  0x3C00
003c08 940c 3c00 	JMP  0x3C00
003c0a 940c 3c00 	JMP  0x3C00
003c0c 940c 3c00 	JMP  0x3C00
003c0e 940c 3c00 	JMP  0x3C00
003c10 940c 3c00 	JMP  0x3C00
003c12 940c 3c00 	JMP  0x3C00
003c14 940c 3c00 	JMP  0x3C00
003c16 940c 3c00 	JMP  0x3C00
003c18 940c 3c00 	JMP  0x3C00
003c1a 940c 3c64 	JMP  _timer1_ovf_isr
003c1c 940c 3c00 	JMP  0x3C00
003c1e 940c 3c00 	JMP  0x3C00
003c20 940c 3c00 	JMP  0x3C00
003c22 940c 3c00 	JMP  0x3C00
003c24 940c 3c00 	JMP  0x3C00
003c26 940c 3c00 	JMP  0x3C00
003c28 940c 3c00 	JMP  0x3C00
003c2a 940c 3c00 	JMP  0x3C00
003c2c 940c 3c00 	JMP  0x3C00
003c2e 940c 3c00 	JMP  0x3C00
003c30 940c 3c00 	JMP  0x3C00
003c32 940c 3c00 	JMP  0x3C00
                 
                 _tbl10_G100:
003c34 2710
003c35 03e8
003c36 0064
003c37 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
003c38 0001      	.DB  0x1,0x0
                 _tbl16_G100:
003c39 1000
003c3a 0100
003c3b 0010
003c3c 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 __RESET:
003c3d 94f8      	CLI
003c3e 27ee      	CLR  R30
003c3f bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF THE BOOT LOADER
003c40 e0f1      	LDI  R31,1
003c41 bff5      	OUT  MCUCR,R31
003c42 e0f2      	LDI  R31,2
003c43 bff5      	OUT  MCUCR,R31
                 
                 ;DISABLE WATCHDOG
003c44 e1f8      	LDI  R31,0x18
003c45 95a8      	WDR
003c46 b7a4      	IN   R26,MCUSR
003c47 7fa7      	CBR  R26,8
003c48 bfa4      	OUT  MCUSR,R26
003c49 93f0 0060 	STS  WDTCSR,R31
003c4b 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
003c4d e08d      	LDI  R24,(14-2)+1
003c4e e0a2      	LDI  R26,2
003c4f 27bb      	CLR  R27
                 __CLEAR_REG:
003c50 93ed      	ST   X+,R30
003c51 958a      	DEC  R24
003c52 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
003c53 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
003c54 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
003c55 e0a0      	LDI  R26,LOW(__SRAM_START)
003c56 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
003c57 93ed      	ST   X+,R30
003c58 9701      	SBIW R24,1
003c59 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GPIOR0 INITIALIZATION
003c5a e0e0      	LDI  R30,__GPIOR0_INIT
003c5b bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
003c5c efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
003c5d bfed      	OUT  SPL,R30
003c5e e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
003c5f bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
003c60 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
003c61 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
003c62 940c 3c70 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;//******************************************************************************
                 ;// Bootloader based on Atmel application note AVR109 communication protocol
                 ;// Target chips: ATmega168/328
                 ;// Chip clock frequency: 16MHz specified in the project configuration.
                 ;//
                 ;// (C) 2010-2012 Pavel Haiduc, HP InfoTech s.r.l.,
                 ;// All rights reserved
                 ;//
                 ;// Compiler: CodeVisionAVR V2.60+
                 ;// Version: 1.00
                 ;//******************************************************************************
                 ;
                 ;/*
                 ;The bootloader expects to receive the '@' character in the first
                 ;5 seconds after reset and enters the bootloader mode and
                 ;responds with a '\r' character.
                 ;If the above condition is not met, execution starts from address 0.
                 ;
                 ;It can be tested with the included avr109test.exe program.
                 ;*/
                 ;
                 ;#include "defines.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                      #define WR_SPMCR_REG_R22 out 0x37,r22
                 ;#include "flash.h"
                 ;#include <stdio.h>
                 ;
                 ;// Baud rate used for communication with the bootloader
                 ;#define	BAUD_RATE 115200
                 ;// baud rate register value calculation
                 ;#define	BRREG_VALUE	(_MCU_CLOCK_FREQUENCY_/(8*BAUD_RATE)-1)
                 ;
                 ;#define STARTUP_CHAR '@' // character used to start bootloader mode
                 ;#define STARTUP_DELAY 5  // period during which the bootloader expects
                 ;                         // to receive the STARTUP_CHAR character
                 ;                         // to enter bootloader mode
                 ;#define TIMER1_OVF_PERIOD 100 // time period between two timer 1 overflows [ms]
                 ;#define TIMER1_CLK_DIV 64 // value for timer 1 clock division coeficient
                 ;#define TIMER1_CNT_INIT (65536-(_MCU_CLOCK_FREQUENCY_*TIMER1_OVF_PERIOD)/(TIMER1_CLK_DIV*1000))
                 ;
                 ;// BLOCKSIZE should be chosen so that the following holds: BLOCKSIZE*n = PAGESIZE,  where n=1,2,3...
                 ;#define BLOCKSIZE PAGESIZE
                 ;
                 ;unsigned char startup_delay_cnt;
                 ;
                 ;// Timer1 overflow interrupt service routine
                 ;// Occurs every 100 ms
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 002F {
                 
                 	.CSEG
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
003c64 93ea      	ST   -Y,R30
003c65 b7ef      	IN   R30,SREG
003c66 93ea      	ST   -Y,R30
                 ; 0000 0030 // Reinitialize Timer1 value
                 ; 0000 0031 TCNT1H=TIMER1_CNT_INIT >> 8;
003c67 940e 3ec7 	CALL SUBOPT_0x0
                 ; 0000 0032 TCNT1L=TIMER1_CNT_INIT & 0xff;
                 ; 0000 0033 // decrement the startup delay counter
                 ; 0000 0034 if (startup_delay_cnt) --startup_delay_cnt;
003c69 2055      	TST  R5
003c6a f009      	BREQ _0x3
003c6b 945a      	DEC  R5
                 ; 0000 0035 }
                 _0x3:
003c6c 91e9      	LD   R30,Y+
003c6d bfef      	OUT  SREG,R30
003c6e 91e9      	LD   R30,Y+
003c6f 9518      	RETI
                 ; .FEND
                 ;
                 ;unsigned char BlockLoad(unsigned int size, unsigned char mem, ADDR_t *address);
                 ;void BlockRead(unsigned int size, unsigned char mem, ADDR_t *address);
                 ;
                 ;void main(void)
                 ; 0000 003B {
                 _main:
                 ; .FSTART _main
                 ; 0000 003C ADDR_t address;
                 ; 0000 003D unsigned int temp_int;
                 ; 0000 003E unsigned char val;
                 ; 0000 003F 
                 ; 0000 0040 // Initialize USART
                 ; 0000 0041 UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (1<<U2X0) | (0<<MPCM0);
                 ;	address -> R16,R17
                 ;	temp_int -> R18,R19
                 ;	val -> R21
003c70 e0e2      	LDI  R30,LOW(2)
003c71 93e0 00c0 	STS  192,R30
                 ; 0000 0042 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
003c73 e1e8      	LDI  R30,LOW(24)
003c74 93e0 00c1 	STS  193,R30
                 ; 0000 0043 UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
003c76 e0e6      	LDI  R30,LOW(6)
003c77 93e0 00c2 	STS  194,R30
                 ; 0000 0044 UBRR0H=BRREG_VALUE >> 8;
003c79 e0e0      	LDI  R30,LOW(0)
003c7a 93e0 00c5 	STS  197,R30
                 ; 0000 0045 UBRR0L=BRREG_VALUE & 0xFF;
003c7c e1e0      	LDI  R30,LOW(16)
003c7d 93e0 00c4 	STS  196,R30
                 ; 0000 0046 
                 ; 0000 0047 // Timer/Counter 1 initialization
                 ; 0000 0048 // Clock source: System Clock
                 ; 0000 0049 // Clock divisor: 64
                 ; 0000 004A // Mode: Normal top=0xFFFF
                 ; 0000 004B // Timer Period: 100 ms
                 ; 0000 004C // Timer1 Overflow Interrupt: On
                 ; 0000 004D TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
003c7f e0e0      	LDI  R30,LOW(0)
003c80 93e0 0080 	STS  128,R30
                 ; 0000 004E TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
003c82 e0e3      	LDI  R30,LOW(3)
003c83 93e0 0081 	STS  129,R30
                 ; 0000 004F TCNT1H=TIMER1_CNT_INIT >> 8;
003c85 940e 3ec7 	CALL SUBOPT_0x0
                 ; 0000 0050 TCNT1L=TIMER1_CNT_INIT & 0xFF;
                 ; 0000 0051 
                 ; 0000 0052 // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 0053 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (1<<TOIE1);
003c87 e0e1      	LDI  R30,LOW(1)
003c88 93e0 006f 	STS  111,R30
                 ; 0000 0054 
                 ; 0000 0055 startup_delay_cnt=STARTUP_DELAY*10;
003c8a e3e2      	LDI  R30,LOW(50)
003c8b 2e5e      	MOV  R5,R30
                 ; 0000 0056 
                 ; 0000 0057 // Global enable interrupts
                 ; 0000 0058 #asm("sei")
003c8c 9478      	sei
                 ; 0000 0059 
                 ; 0000 005A // wait to receive the '@' character
                 ; 0000 005B while (startup_delay_cnt)
                 _0x4:
003c8d 2055      	TST  R5
003c8e f049      	BREQ _0x6
                 ; 0000 005C       {
                 ; 0000 005D       if (UCSR0A & (1<<RXC0))
003c8f 91e0 00c0 	LDS  R30,192
003c91 78e0      	ANDI R30,LOW(0x80)
003c92 f021      	BREQ _0x7
                 ; 0000 005E          if (UDR0==STARTUP_CHAR) goto enter_bootloader_mode;
003c93 91a0 00c6 	LDS  R26,198
003c95 34a0      	CPI  R26,LOW(0x40)
003c96 f051      	BREQ _0x9
                 ; 0000 005F       }
                 _0x7:
003c97 cff5      	RJMP _0x4
                 _0x6:
                 ; 0000 0060 
                 ; 0000 0061 // the startup delay elapsed without having received the
                 ; 0000 0062 // STARTUP_CHAR character, so start execution from the application section
                 ; 0000 0063 // stop Timer 1 as it's not needed anymore
                 ; 0000 0064 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
003c98 940e 3ece 	CALL SUBOPT_0x1
                 ; 0000 0065 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
                 ; 0000 0066 
                 ; 0000 0067 start_application:
                 _0xA:
                 ; 0000 0068 // disable interrupts
                 ; 0000 0069 #asm("cli")
003c9a 94f8      	cli
                 ; 0000 006A 
                 ; 0000 006B #pragma optsize-
                 ; 0000 006C // will use the interrupt vectors from the application section
                 ; 0000 006D MCUCR=(1<<IVCE);
003c9b e0e1      	LDI  R30,LOW(1)
003c9c bfe5      	OUT  0x35,R30
                 ; 0000 006E MCUCR=(0<<IVSEL) | (0<<IVCE);
003c9d e0e0      	LDI  R30,LOW(0)
003c9e bfe5      	OUT  0x35,R30
                 ; 0000 006F #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0070 #pragma optsize+
                 ; 0000 0071 #endif
                 ; 0000 0072 
                 ; 0000 0073 // start execution from address 0
                 ; 0000 0074 #asm("jmp 0")
003c9f 940c 0000 	jmp 0
                 ; 0000 0075 
                 ; 0000 0076 enter_bootloader_mode:
                 _0x9:
                 ; 0000 0077 // stop Timer 1 as it's not needed anymore
                 ; 0000 0078 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
003ca1 940e 3ece 	CALL SUBOPT_0x1
                 ; 0000 0079 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
                 ; 0000 007A 
                 ; 0000 007B // send confirmation response
                 ; 0000 007C putchar('\r');
003ca3 e0ad      	LDI  R26,LOW(13)
003ca4 940e 3ebd 	CALL _putchar
                 ; 0000 007D 
                 ; 0000 007E // main loop
                 ; 0000 007F while (1)
                 _0xB:
                 ; 0000 0080     {
                 ; 0000 0081         val=getchar(); // Wait for command character.
003ca6 940e 3eb6 	CALL _getchar
003ca8 2f5e      	MOV  R21,R30
                 ; 0000 0082 
                 ; 0000 0083         // Check autoincrement status.
                 ; 0000 0084         if(val=='a')
003ca9 3651      	CPI  R21,97
003caa f411      	BRNE _0xE
                 ; 0000 0085         {
                 ; 0000 0086             putchar('Y'); // Yes, we do autoincrement.
003cab e5a9      	LDI  R26,LOW(89)
003cac c12f      	RJMP _0x86
                 ; 0000 0087         }
                 ; 0000 0088 
                 ; 0000 0089 
                 ; 0000 008A         // Set address.
                 ; 0000 008B         else if(val=='A') // Set address...
                 _0xE:
003cad 3451      	CPI  R21,65
003cae f441      	BRNE _0x10
                 ; 0000 008C         { // NOTE: Flash addresses are given in words, not bytes.
                 ; 0000 008D             // Read address high and low byte.
                 ; 0000 008E             ((unsigned char *) &address)[1] = getchar(); // MSB
003caf 940e 3eb6 	CALL _getchar
003cb1 2f1e      	MOV  R17,R30
                 ; 0000 008F             ((unsigned char *) &address)[0] = getchar(); // LSB
003cb2 940e 3eb6 	CALL _getchar
003cb4 2f0e      	MOV  R16,R30
                 ; 0000 0090             putchar('\r'); // Send OK back.
003cb5 e0ad      	LDI  R26,LOW(13)
003cb6 c125      	RJMP _0x86
                 ; 0000 0091         }
                 ; 0000 0092 
                 ; 0000 0093 
                 ; 0000 0094         // Chip erase.
                 ; 0000 0095         else if(val=='e')
                 _0x10:
003cb7 3655      	CPI  R21,101
003cb8 f499      	BRNE _0x12
                 ; 0000 0096         {
                 ; 0000 0097             for(address = 0; address < APP_END;address += PAGESIZE)
                +
003cb9 e000     +LDI R16 , LOW ( 0 )
003cba e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x14:
                +
003cbb 3000     +CPI R16 , LOW ( 15360 )
003cbc e3ec     +LDI R30 , HIGH ( 15360 )
003cbd 071e     +CPC R17 , R30
                 	__CPWRN 16,17,15360
003cbe f458      	BRSH _0x15
                 ; 0000 0098             { // NOTE: Here we use address as a byte-address, not word-address, for convenience.
                 ; 0000 0099                 _WAIT_FOR_SPM();
                 _0x16:
003cbf b7e7      	IN   R30,0x37
003cc0 fde0      	SBRC R30,0
003cc1 cffd      	RJMP _0x16
                 ; 0000 009A                 _PAGE_ERASE( address );
003cc2 931a      	ST   -Y,R17
003cc3 930a      	ST   -Y,R16
003cc4 e0a3      	LDI  R26,LOW(3)
003cc5 940e 3eae 	CALL ___AddrToZByteToSPMCR_SPM
                 ; 0000 009B             }
                +
003cc7 5800     +SUBI R16 , LOW ( - 128 )
003cc8 4f1f     +SBCI R17 , HIGH ( - 128 )
                 	__ADDWRN 16,17,128
003cc9 cff1      	RJMP _0x14
                 _0x15:
                 ; 0000 009C 
                 ; 0000 009D             putchar('\r'); // Send OK back.
003cca e0ad      	LDI  R26,LOW(13)
003ccb c110      	RJMP _0x86
                 ; 0000 009E         }
                 ; 0000 009F 
                 ; 0000 00A0         // Check block load support.
                 ; 0000 00A1         else if(val=='b')
                 _0x12:
003ccc 3652      	CPI  R21,98
003ccd f441      	BRNE _0x1A
                 ; 0000 00A2         {
                 ; 0000 00A3             putchar('Y'); // Report block load supported.
003cce e5a9      	LDI  R26,LOW(89)
003ccf 940e 3ebd 	CALL _putchar
                 ; 0000 00A4             putchar((BLOCKSIZE>>8) & 0xFF); // MSB first.
003cd1 e0a0      	LDI  R26,LOW(0)
003cd2 940e 3ebd 	CALL _putchar
                 ; 0000 00A5             putchar(BLOCKSIZE&0xFF); // Report BLOCKSIZE (bytes).
003cd4 e8a0      	LDI  R26,LOW(128)
003cd5 c106      	RJMP _0x86
                 ; 0000 00A6         }
                 ; 0000 00A7 
                 ; 0000 00A8 
                 ; 0000 00A9         // Start block load.
                 ; 0000 00AA         else if(val=='B')
                 _0x1A:
003cd6 3452      	CPI  R21,66
003cd7 f461      	BRNE _0x1C
                 ; 0000 00AB         {
                 ; 0000 00AC             // Get block size.
                 ; 0000 00AD             ((unsigned char *) &temp_int)[1] = getchar(); // MSB
003cd8 940e 3ed4 	CALL SUBOPT_0x2
                 ; 0000 00AE             ((unsigned char *) &temp_int)[0] = getchar(); // LSB
                 ; 0000 00AF             putchar( BlockLoad(temp_int,getchar() /* Get mem. type */,&address) ); // Block load.
003cda b7ad      	IN   R26,SPL
003cdb b7be      	IN   R27,SPH
003cdc 9711      	SBIW R26,1
003cdd 931f      	PUSH R17
003cde 930f      	PUSH R16
003cdf d100      	RCALL _BlockLoad
003ce0 910f      	POP  R16
003ce1 911f      	POP  R17
003ce2 2fae      	MOV  R26,R30
003ce3 c0f8      	RJMP _0x86
                 ; 0000 00B0         }
                 ; 0000 00B1 
                 ; 0000 00B2         // Start block read.
                 ; 0000 00B3         else if(val=='g')
                 _0x1C:
003ce4 3657      	CPI  R21,103
003ce5 f459      	BRNE _0x1E
                 ; 0000 00B4         {
                 ; 0000 00B5             // Get block size.
                 ; 0000 00B6             ((unsigned char *) &temp_int)[1] = getchar(); // MSB
003ce6 940e 3ed4 	CALL SUBOPT_0x2
                 ; 0000 00B7             ((unsigned char *) &temp_int)[0] = getchar(); // LSB
                 ; 0000 00B8             BlockRead(temp_int,getchar() /* Get mem. type */,&address); // Block read
003ce8 b7ad      	IN   R26,SPL
003ce9 b7be      	IN   R27,SPH
003cea 9711      	SBIW R26,1
003ceb 931f      	PUSH R17
003cec 930f      	PUSH R16
003ced d172      	RCALL _BlockRead
003cee 910f      	POP  R16
003cef 911f      	POP  R17
                 ; 0000 00B9         }
                 ; 0000 00BA 
                 ; 0000 00BB         // Read program memory.
                 ; 0000 00BC         else if(val=='R')
003cf0 c0ed      	RJMP _0x1F
                 _0x1E:
003cf1 3552      	CPI  R21,82
003cf2 f4b1      	BRNE _0x20
                 ; 0000 00BD         {
                 ; 0000 00BE             // Send high byte, then low byte of flash word.
                 ; 0000 00BF             _WAIT_FOR_SPM();
                 _0x21:
003cf3 b7e7      	IN   R30,0x37
003cf4 fde0      	SBRC R30,0
003cf5 cffd      	RJMP _0x21
                 ; 0000 00C0             _ENABLE_RWW_SECTION();
003cf6 940e 3ee0 	CALL SUBOPT_0x3
                 ; 0000 00C1             putchar( _LOAD_PROGRAM_MEMORY( (address << 1)+1 ) );
003cf8 01f8      	MOVW R30,R16
003cf9 0fee      	LSL  R30
003cfa 1fff      	ROL  R31
003cfb 9631      	ADIW R30,1
003cfc 91a4      	LPM  R26,Z
003cfd 940e 3ebd 	CALL _putchar
                 ; 0000 00C2             putchar( _LOAD_PROGRAM_MEMORY( (address << 1)+0 ) );
003cff 01f8      	MOVW R30,R16
003d00 0fee      	LSL  R30
003d01 1fff      	ROL  R31
003d02 9630      	ADIW R30,0
003d03 91a4      	LPM  R26,Z
003d04 940e 3ebd 	CALL _putchar
                 ; 0000 00C3 
                 ; 0000 00C4             address++; // Auto-advance to next Flash word.
                +
003d06 5f0f     +SUBI R16 , LOW ( - 1 )
003d07 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 00C5         }
                 ; 0000 00C6 
                 ; 0000 00C7 
                 ; 0000 00C8         // Write program memory, low byte.
                 ; 0000 00C9         else if(val=='c')
003d08 c0d5      	RJMP _0x24
                 _0x20:
003d09 3653      	CPI  R21,99
003d0a f431      	BRNE _0x25
                 ; 0000 00CA         { // NOTE: Always use this command before sending high byte.
                 ; 0000 00CB             temp_int=getchar(); // Get low byte for later _FILL_TEMP_WORD.
003d0b 940e 3eb6 	CALL _getchar
003d0d 2f2e      	MOV  R18,R30
003d0e 2733      	CLR  R19
                 ; 0000 00CC             putchar('\r'); // Send OK back.
003d0f e0ad      	LDI  R26,LOW(13)
003d10 c0cb      	RJMP _0x86
                 ; 0000 00CD         }
                 ; 0000 00CE 
                 ; 0000 00CF 
                 ; 0000 00D0         // Write program memory, high byte.
                 ; 0000 00D1         else if(val=='C')
                 _0x25:
003d11 3453      	CPI  R21,67
003d12 f4a1      	BRNE _0x27
                 ; 0000 00D2         {
                 ; 0000 00D3             // Get and insert high byte.
                 ; 0000 00D4             ((unsigned char *) &temp_int)[1] = getchar(); // MSB
003d13 940e 3eb6 	CALL _getchar
003d15 2f3e      	MOV  R19,R30
                 ; 0000 00D5             _WAIT_FOR_SPM();
                 _0x28:
003d16 b7e7      	IN   R30,0x37
003d17 fde0      	SBRC R30,0
003d18 cffd      	RJMP _0x28
                 ; 0000 00D6             _FILL_TEMP_WORD( (address << 1), temp_int ); // Convert word-address to byte-address and fill.
003d19 01f8      	MOVW R30,R16
003d1a 0fee      	LSL  R30
003d1b 1fff      	ROL  R31
003d1c 93fa      	ST   -Y,R31
003d1d 93ea      	ST   -Y,R30
003d1e 933a      	ST   -Y,R19
003d1f 932a      	ST   -Y,R18
003d20 e0a1      	LDI  R26,LOW(1)
003d21 940e 3ea4 	CALL ___AddrToZWordToR1R0ByteToSPMCR_SPM
                 ; 0000 00D7             address++; // Auto-advance to next Flash word.
                +
003d23 5f0f     +SUBI R16 , LOW ( - 1 )
003d24 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 00D8             putchar('\r'); // Send OK back.
003d25 e0ad      	LDI  R26,LOW(13)
003d26 c0b5      	RJMP _0x86
                 ; 0000 00D9         }
                 ; 0000 00DA 
                 ; 0000 00DB 
                 ; 0000 00DC         // Write page.
                 ; 0000 00DD         else if(val== 'm')
                 _0x27:
003d27 365d      	CPI  R21,109
003d28 f4a9      	BRNE _0x2C
                 ; 0000 00DE         {
                 ; 0000 00DF             if( address >= (APP_END>>1) ) // Protect bootloader area.
                +
003d29 3000     +CPI R16 , LOW ( 7680 )
003d2a e1ee     +LDI R30 , HIGH ( 7680 )
003d2b 071e     +CPC R17 , R30
                 	__CPWRN 16,17,7680
003d2c f020      	BRLO _0x2D
                 ; 0000 00E0             {
                 ; 0000 00E1                 putchar('?');
003d2d e3af      	LDI  R26,LOW(63)
003d2e 940e 3ebd 	CALL _putchar
                 ; 0000 00E2             }
                 ; 0000 00E3             else
003d30 c00b      	RJMP _0x2E
                 _0x2D:
                 ; 0000 00E4             {
                 ; 0000 00E5                 _WAIT_FOR_SPM();
                 _0x2F:
003d31 b7e7      	IN   R30,0x37
003d32 fde0      	SBRC R30,0
003d33 cffd      	RJMP _0x2F
                 ; 0000 00E6                 _PAGE_WRITE( address << 1 ); // Convert word-address to byte-address and write.
003d34 01f8      	MOVW R30,R16
003d35 0fee      	LSL  R30
003d36 1fff      	ROL  R31
003d37 93fa      	ST   -Y,R31
003d38 93ea      	ST   -Y,R30
003d39 e0a5      	LDI  R26,LOW(5)
003d3a 940e 3eae 	CALL ___AddrToZByteToSPMCR_SPM
                 ; 0000 00E7             }
                 _0x2E:
                 ; 0000 00E8 
                 ; 0000 00E9             putchar('\r'); // Send OK back.
003d3c e0ad      	LDI  R26,LOW(13)
003d3d c09e      	RJMP _0x86
                 ; 0000 00EA         }
                 ; 0000 00EB 
                 ; 0000 00EC         // Write EEPROM memory.
                 ; 0000 00ED         else if (val == 'D')
                 _0x2C:
003d3e 3454      	CPI  R21,68
003d3f f461      	BRNE _0x33
                 ; 0000 00EE         {
                 ; 0000 00EF             _WAIT_FOR_SPM();
                 _0x34:
003d40 b7e7      	IN   R30,0x37
003d41 fde0      	SBRC R30,0
003d42 cffd      	RJMP _0x34
                 ; 0000 00F0             *((eeprom unsigned char *) address) = getchar(); // Write received byte.
003d43 940e 3eb6 	CALL _getchar
003d45 01d8      	MOVW R26,R16
003d46 940e 3f19 	CALL __EEPROMWRB
                 ; 0000 00F1             address++; // Auto-advance to next EEPROM byte.
                +
003d48 5f0f     +SUBI R16 , LOW ( - 1 )
003d49 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 00F2             putchar('\r');// Send OK back.
003d4a e0ad      	LDI  R26,LOW(13)
003d4b c090      	RJMP _0x86
                 ; 0000 00F3         }
                 ; 0000 00F4 
                 ; 0000 00F5 
                 ; 0000 00F6         // Read EEPROM memory.
                 ; 0000 00F7         else if (val == 'd')
                 _0x33:
003d4c 3654      	CPI  R21,100
003d4d f449      	BRNE _0x38
                 ; 0000 00F8         {
                 ; 0000 00F9             putchar(*((eeprom unsigned char *) address)); // Read byte send it back.
003d4e 01d8      	MOVW R26,R16
003d4f 940e 3f0d 	CALL __EEPROMRDB
003d51 2fae      	MOV  R26,R30
003d52 940e 3ebd 	CALL _putchar
                 ; 0000 00FA             address++; // Auto-advance to next EEPROM byte.
                +
003d54 5f0f     +SUBI R16 , LOW ( - 1 )
003d55 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 00FB         }
                 ; 0000 00FC 
                 ; 0000 00FD         // Write lockbits.
                 ; 0000 00FE         else if(val=='l')
003d56 c087      	RJMP _0x39
                 _0x38:
003d57 365c      	CPI  R21,108
003d58 f459      	BRNE _0x3A
                 ; 0000 00FF         {
                 ; 0000 0100             _WAIT_FOR_SPM();
                 _0x3B:
003d59 b7e7      	IN   R30,0x37
003d5a fde0      	SBRC R30,0
003d5b cffd      	RJMP _0x3B
                 ; 0000 0101             _SET_LOCK_BITS( getchar() ); // Read and set lock bits.
003d5c 940e 3eb6 	CALL _getchar
003d5e 93ea      	ST   -Y,R30
003d5f e0a9      	LDI  R26,LOW(9)
003d60 940e 3e9d 	CALL ___DataToR0ByteToSPMCR_SPM
                 ; 0000 0102             putchar('\r'); // Send OK back.
003d62 e0ad      	LDI  R26,LOW(13)
003d63 c078      	RJMP _0x86
                 ; 0000 0103         }
                 ; 0000 0104 
                 ; 0000 0105 
                 ; 0000 0106         // Read lock bits.
                 ; 0000 0107         else if(val=='r')
                 _0x3A:
003d64 3752      	CPI  R21,114
003d65 f441      	BRNE _0x3F
                 ; 0000 0108         {
                 ; 0000 0109             _WAIT_FOR_SPM();
                 _0x40:
003d66 b7e7      	IN   R30,0x37
003d67 fde0      	SBRC R30,0
003d68 cffd      	RJMP _0x40
                 ; 0000 010A             putchar( _GET_LOCK_BITS() );
003d69 e0e1      	LDI  R30,LOW(1)
003d6a e0f0      	LDI  R31,HIGH(1)
003d6b 940e 3ee5 	CALL SUBOPT_0x4
003d6d c06e      	RJMP _0x86
                 ; 0000 010B         }
                 ; 0000 010C 
                 ; 0000 010D 
                 ; 0000 010E         // Read fuse bits.
                 ; 0000 010F         else if(val=='F')
                 _0x3F:
003d6e 3456      	CPI  R21,70
003d6f f441      	BRNE _0x44
                 ; 0000 0110         {
                 ; 0000 0111             _WAIT_FOR_SPM();
                 _0x45:
003d70 b7e7      	IN   R30,0x37
003d71 fde0      	SBRC R30,0
003d72 cffd      	RJMP _0x45
                 ; 0000 0112             putchar( _GET_LOW_FUSES() );
003d73 e0e0      	LDI  R30,LOW(0)
003d74 e0f0      	LDI  R31,HIGH(0)
003d75 940e 3ee5 	CALL SUBOPT_0x4
003d77 c064      	RJMP _0x86
                 ; 0000 0113         }
                 ; 0000 0114 
                 ; 0000 0115 
                 ; 0000 0116         // Read high fuse bits.
                 ; 0000 0117         else if(val=='N')
                 _0x44:
003d78 345e      	CPI  R21,78
003d79 f441      	BRNE _0x49
                 ; 0000 0118         {
                 ; 0000 0119             _WAIT_FOR_SPM();
                 _0x4A:
003d7a b7e7      	IN   R30,0x37
003d7b fde0      	SBRC R30,0
003d7c cffd      	RJMP _0x4A
                 ; 0000 011A             putchar( _GET_HIGH_FUSES() );
003d7d e0e3      	LDI  R30,LOW(3)
003d7e e0f0      	LDI  R31,HIGH(3)
003d7f 940e 3ee5 	CALL SUBOPT_0x4
003d81 c05a      	RJMP _0x86
                 ; 0000 011B         }
                 ; 0000 011C 
                 ; 0000 011D 
                 ; 0000 011E         // Read extended fuse bits.
                 ; 0000 011F         else if(val=='Q')
                 _0x49:
003d82 3551      	CPI  R21,81
003d83 f441      	BRNE _0x4E
                 ; 0000 0120         {
                 ; 0000 0121             _WAIT_FOR_SPM();
                 _0x4F:
003d84 b7e7      	IN   R30,0x37
003d85 fde0      	SBRC R30,0
003d86 cffd      	RJMP _0x4F
                 ; 0000 0122             putchar( _GET_EXTENDED_FUSES() );
003d87 e0e2      	LDI  R30,LOW(2)
003d88 e0f0      	LDI  R31,HIGH(2)
003d89 940e 3ee5 	CALL SUBOPT_0x4
003d8b c050      	RJMP _0x86
                 ; 0000 0123         }
                 ; 0000 0124 
                 ; 0000 0125         // Enter and leave programming mode.
                 ; 0000 0126         else if((val=='P')||(val=='L'))
                 _0x4E:
003d8c 3550      	CPI  R21,80
003d8d f011      	BREQ _0x54
003d8e 345c      	CPI  R21,76
003d8f f411      	BRNE _0x53
                 _0x54:
                 ; 0000 0127         {
                 ; 0000 0128             putchar('\r'); // Nothing special to do, just answer OK.
003d90 e0ad      	LDI  R26,LOW(13)
003d91 c04a      	RJMP _0x86
                 ; 0000 0129         }
                 ; 0000 012A 
                 ; 0000 012B 
                 ; 0000 012C         // Exit bootloader.
                 ; 0000 012D         else if(val=='E')
                 _0x53:
003d92 3455      	CPI  R21,69
003d93 f449      	BRNE _0x57
                 ; 0000 012E         {
                 ; 0000 012F             _WAIT_FOR_SPM();
                 _0x58:
003d94 b7e7      	IN   R30,0x37
003d95 fde0      	SBRC R30,0
003d96 cffd      	RJMP _0x58
                 ; 0000 0130             _ENABLE_RWW_SECTION();
003d97 940e 3ee0 	CALL SUBOPT_0x3
                 ; 0000 0131             putchar('\r');
003d99 e0ad      	LDI  R26,LOW(13)
003d9a 940e 3ebd 	CALL _putchar
                 ; 0000 0132             // Jump to Reset vector 0x0000 in Application Section.
                 ; 0000 0133             goto start_application;
003d9c cefd      	RJMP _0xA
                 ; 0000 0134         }
                 ; 0000 0135 
                 ; 0000 0136 
                 ; 0000 0137         // Get programmer type.
                 ; 0000 0138         else if (val=='p')
                 _0x57:
003d9d 3750      	CPI  R21,112
003d9e f411      	BRNE _0x5C
                 ; 0000 0139         {
                 ; 0000 013A             putchar('S'); // Answer 'SERIAL'.
003d9f e5a3      	LDI  R26,LOW(83)
003da0 c03b      	RJMP _0x86
                 ; 0000 013B         }
                 ; 0000 013C 
                 ; 0000 013D 
                 ; 0000 013E         // Return supported device codes.
                 ; 0000 013F         else if(val=='t')
                 _0x5C:
003da1 3754      	CPI  R21,116
003da2 f429      	BRNE _0x5E
                 ; 0000 0140         {
                 ; 0000 0141             putchar( PARTCODE ); // Supports only this device, of course.
003da3 e4a4      	LDI  R26,LOW(68)
003da4 940e 3ebd 	CALL _putchar
                 ; 0000 0142             putchar( 0 ); // Send list terminator.
003da6 e0a0      	LDI  R26,LOW(0)
003da7 c034      	RJMP _0x86
                 ; 0000 0143         }
                 ; 0000 0144 
                 ; 0000 0145 
                 ; 0000 0146         // Set LED, clear LED and set device type.
                 ; 0000 0147         else if((val=='x')||(val=='y')||(val=='T'))
                 _0x5E:
003da8 3758      	CPI  R21,120
003da9 f021      	BREQ _0x61
003daa 3759      	CPI  R21,121
003dab f011      	BREQ _0x61
003dac 3554      	CPI  R21,84
003dad f421      	BRNE _0x60
                 _0x61:
                 ; 0000 0148         {
                 ; 0000 0149             getchar(); // Ignore the command and it's parameter.
003dae 940e 3eb6 	CALL _getchar
                 ; 0000 014A             putchar('\r'); // Send OK back.
003db0 e0ad      	LDI  R26,LOW(13)
003db1 c02a      	RJMP _0x86
                 ; 0000 014B         }
                 ; 0000 014C 
                 ; 0000 014D         // Return programmer identifier.
                 ; 0000 014E         else if(val=='S')
                 _0x60:
003db2 3553      	CPI  R21,83
003db3 f4a1      	BRNE _0x64
                 ; 0000 014F         {
                 ; 0000 0150             putchar('A'); // Return 'AVRBOOT'.
003db4 e4a1      	LDI  R26,LOW(65)
003db5 940e 3ebd 	CALL _putchar
                 ; 0000 0151             putchar('V'); // Software identifier (aka programmer signature) is always 7 characters.
003db7 e5a6      	LDI  R26,LOW(86)
003db8 940e 3ebd 	CALL _putchar
                 ; 0000 0152             putchar('R');
003dba e5a2      	LDI  R26,LOW(82)
003dbb 940e 3ebd 	CALL _putchar
                 ; 0000 0153             putchar('B');
003dbd e4a2      	LDI  R26,LOW(66)
003dbe 940e 3ebd 	CALL _putchar
                 ; 0000 0154             putchar('O');
003dc0 e4af      	LDI  R26,LOW(79)
003dc1 940e 3ebd 	CALL _putchar
                 ; 0000 0155             putchar('O');
003dc3 e4af      	LDI  R26,LOW(79)
003dc4 940e 3ebd 	CALL _putchar
                 ; 0000 0156             putchar('T');
003dc6 e5a4      	LDI  R26,LOW(84)
003dc7 c014      	RJMP _0x86
                 ; 0000 0157         }
                 ; 0000 0158 
                 ; 0000 0159         // Return software version.
                 ; 0000 015A         else if(val=='V')
                 _0x64:
003dc8 3556      	CPI  R21,86
003dc9 f429      	BRNE _0x66
                 ; 0000 015B         {
                 ; 0000 015C             putchar('1');
003dca e3a1      	LDI  R26,LOW(49)
003dcb 940e 3ebd 	CALL _putchar
                 ; 0000 015D             putchar('0');
003dcd e3a0      	LDI  R26,LOW(48)
003dce c00d      	RJMP _0x86
                 ; 0000 015E         }
                 ; 0000 015F 
                 ; 0000 0160         // Return signature bytes.
                 ; 0000 0161         else if(val=='s')
                 _0x66:
003dcf 3753      	CPI  R21,115
003dd0 f441      	BRNE _0x68
                 ; 0000 0162         {
                 ; 0000 0163             putchar( SIGNATURE_BYTE_3 );
003dd1 e0af      	LDI  R26,LOW(15)
003dd2 940e 3ebd 	CALL _putchar
                 ; 0000 0164             putchar( SIGNATURE_BYTE_2 );
003dd4 e9a4      	LDI  R26,LOW(148)
003dd5 940e 3ebd 	CALL _putchar
                 ; 0000 0165             putchar( SIGNATURE_BYTE_1 );
003dd7 e1ae      	LDI  R26,LOW(30)
003dd8 c003      	RJMP _0x86
                 ; 0000 0166         }
                 ; 0000 0167 
                 ; 0000 0168         // The last command to accept is ESC (synchronization).
                 ; 0000 0169         else if(val!=0x1b)                  // If not ESC, then it is unrecognized...
                 _0x68:
003dd9 315b      	CPI  R21,27
003dda f019      	BREQ _0x6A
                 ; 0000 016A         {
                 ; 0000 016B             putchar('?');
003ddb e3af      	LDI  R26,LOW(63)
                 _0x86:
003ddc 940e 3ebd 	CALL _putchar
                 ; 0000 016C         }
                 ; 0000 016D     }
                 _0x6A:
                 _0x39:
                 _0x24:
                 _0x1F:
003dde cec7      	RJMP _0xB
                 ; 0000 016E 
                 ; 0000 016F }
                 _0x6B:
003ddf cfff      	RJMP _0x6B
                 ; .FEND
                 ;
                 ;unsigned char BlockLoad(unsigned int size, unsigned char mem, ADDR_t *address)
                 ; 0000 0172 {
                 _BlockLoad:
                 ; .FSTART _BlockLoad
                 ; 0000 0173 unsigned int data;
                 ; 0000 0174 ADDR_t tempaddress,addr;
                 ; 0000 0175 unsigned char buffer[BLOCKSIZE];
                 ; 0000 0176 
                 ; 0000 0177 addr=*address;
003de0 93ba      	ST   -Y,R27
003de1 93aa      	ST   -Y,R26
003de2 97ef      	SBIW R28,63
003de3 97ef      	SBIW R28,63
003de4 9722      	SBIW R28,2
003de5 940e 3f2a 	CALL __SAVELOCR6
                 ;	size -> Y+137
                 ;	mem -> Y+136
                 ;	*address -> Y+134
                 ;	data -> R16,R17
                 ;	tempaddress -> R18,R19
                 ;	addr -> R20,R21
                 ;	buffer -> Y+6
003de7 940e 3eec 	CALL SUBOPT_0x5
003de9 914d      	LD   R20,X+
003dea 915c      	LD   R21,X
                 ; 0000 0178 
                 ; 0000 0179 // EEPROM memory type.
                 ; 0000 017A if(mem=='E')
                +
003deb 01de     +MOVW R26 , R28
003dec 57a8     +SUBI R26 , LOW ( - 136 )
003ded 4fbf     +SBCI R27 , HIGH ( - 136 )
003dee 91ac     +LD R26 , X
                 	__GETB2SX 136
003def 34a5      	CPI  R26,LOW(0x45)
003df0 f591      	BRNE _0x6C
                 ; 0000 017B {
                 ; 0000 017C     /* Fill buffer first, as EEPROM is too slow to copy with UART speed */
                 ; 0000 017D     for(tempaddress=0;tempaddress<size;tempaddress++)
                +
003df1 e020     +LDI R18 , LOW ( 0 )
003df2 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x6E:
003df3 940e 3ef3 	CALL SUBOPT_0x6
003df5 f478      	BRSH _0x6F
                 ; 0000 017E         buffer[tempaddress] = getchar();
003df6 01f9      	MOVW R30,R18
003df7 01de      	MOVW R26,R28
003df8 9616      	ADIW R26,6
003df9 0fea      	ADD  R30,R26
003dfa 1ffb      	ADC  R31,R27
003dfb 93ff      	PUSH R31
003dfc 93ef      	PUSH R30
003dfd 940e 3eb6 	CALL _getchar
003dff 91af      	POP  R26
003e00 91bf      	POP  R27
003e01 93ec      	ST   X,R30
                +
003e02 5f2f     +SUBI R18 , LOW ( - 1 )
003e03 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
003e04 cfee      	RJMP _0x6E
                 _0x6F:
                 ; 0000 0180 while( SPMCSR & (1<<0       ) );;
                 _0x70:
003e05 b7e7      	IN   R30,0x37
003e06 fde0      	SBRC R30,0
003e07 cffd      	RJMP _0x70
                 ; 0000 0181     /* Then program the EEPROM */
                 ; 0000 0182     for( tempaddress=0; tempaddress < size; tempaddress++)
                +
003e08 e020     +LDI R18 , LOW ( 0 )
003e09 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x74:
003e0a 940e 3ef3 	CALL SUBOPT_0x6
003e0c f480      	BRSH _0x75
                 ; 0000 0183     {
                 ; 0000 0184         *((eeprom unsigned char *) addr++) = buffer[tempaddress]; // Write byte.
003e0d 935f      	PUSH R21
003e0e 934f      	PUSH R20
                +
003e0f 5f4f     +SUBI R20 , LOW ( - 1 )
003e10 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
003e11 01de      	MOVW R26,R28
003e12 9616      	ADIW R26,6
003e13 0fa2      	ADD  R26,R18
003e14 1fb3      	ADC  R27,R19
003e15 91ec      	LD   R30,X
003e16 91af      	POP  R26
003e17 91bf      	POP  R27
003e18 940e 3f19 	CALL __EEPROMWRB
                 ; 0000 0185     }
                +
003e1a 5f2f     +SUBI R18 , LOW ( - 1 )
003e1b 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
003e1c cfed      	RJMP _0x74
                 _0x75:
                 ; 0000 0186 
                 ; 0000 0187     *address=addr;
003e1d 940e 3eec 	CALL SUBOPT_0x5
003e1f 934d      	ST   X+,R20
003e20 935c      	ST   X,R21
                 ; 0000 0188     return '\r'; // Report programming OK
003e21 e0ed      	LDI  R30,LOW(13)
003e22 c037      	RJMP _0x2060002
                 ; 0000 0189 }
                 ; 0000 018A 
                 ; 0000 018B // Flash memory type.
                 ; 0000 018C if(mem=='F')
                 _0x6C:
                +
003e23 01de     +MOVW R26 , R28
003e24 57a8     +SUBI R26 , LOW ( - 136 )
003e25 4fbf     +SBCI R27 , HIGH ( - 136 )
003e26 91ac     +LD R26 , X
                 	__GETB2SX 136
003e27 34a6      	CPI  R26,LOW(0x46)
003e28 f581      	BRNE _0x76
                 ; 0000 018D { // NOTE: For flash programming, 'address' is given in words.
                 ; 0000 018E     addr <<= 1; // Convert address to bytes temporarily.
003e29 0f44      	LSL  R20
003e2a 1f55      	ROL  R21
                 ; 0000 018F     tempaddress = addr;  // Store address in page.
003e2b 019a      	MOVW R18,R20
                 ; 0000 0190 
                 ; 0000 0191     do
                 _0x78:
                 ; 0000 0192     {
                 ; 0000 0193         ((unsigned char *) &data)[0] = getchar(); // LSB
003e2c 940e 3eb6 	CALL _getchar
003e2e 2f0e      	MOV  R16,R30
                 ; 0000 0194         ((unsigned char *) &data)[1] = getchar(); // MSB
003e2f 940e 3eb6 	CALL _getchar
003e31 2f1e      	MOV  R17,R30
                 ; 0000 0195         _FILL_TEMP_WORD(addr,data);
003e32 935a      	ST   -Y,R21
003e33 934a      	ST   -Y,R20
003e34 931a      	ST   -Y,R17
003e35 930a      	ST   -Y,R16
003e36 e0a1      	LDI  R26,LOW(1)
003e37 940e 3ea4 	CALL ___AddrToZWordToR1R0ByteToSPMCR_SPM
                 ; 0000 0196         addr += 2; // Select next word in memory.
                +
003e39 5f4e     +SUBI R20 , LOW ( - 2 )
003e3a 4f5f     +SBCI R21 , HIGH ( - 2 )
                 	__ADDWRN 20,21,2
                 ; 0000 0197         size -= 2; // Reduce number of bytes to write by two.
003e3b 940e 3efc 	CALL SUBOPT_0x7
003e3d 9732      	SBIW R30,2
                +
003e3e 01de     +MOVW R26 , R28
003e3f 57a7     +SUBI R26 , LOW ( - 137 )
003e40 4fbf     +SBCI R27 , HIGH ( - 137 )
003e41 93ed     +ST X + , R30
003e42 93fc     +ST X , R31
                 	__PUTW1SX 137
                 ; 0000 0198     } while(size); // Loop until all bytes written.
003e43 940e 3efc 	CALL SUBOPT_0x7
003e45 9730      	SBIW R30,0
003e46 f729      	BRNE _0x78
                 ; 0000 0199 
                 ; 0000 019A     _PAGE_WRITE(tempaddress);
003e47 933a      	ST   -Y,R19
003e48 932a      	ST   -Y,R18
003e49 e0a5      	LDI  R26,LOW(5)
003e4a 940e 3eae 	CALL ___AddrToZByteToSPMCR_SPM
                 ; 0000 019B     _WAIT_FOR_SPM();
                 _0x7A:
003e4c b7e7      	IN   R30,0x37
003e4d fde0      	SBRC R30,0
003e4e cffd      	RJMP _0x7A
                 ; 0000 019C     _ENABLE_RWW_SECTION();
003e4f 940e 3ee0 	CALL SUBOPT_0x3
                 ; 0000 019D 
                 ; 0000 019E     addr >>= 1; // Convert address back to Flash words again.
003e51 9556      	LSR  R21
003e52 9547      	ROR  R20
                 ; 0000 019F     *address=addr;
003e53 940e 3eec 	CALL SUBOPT_0x5
003e55 934d      	ST   X+,R20
003e56 935c      	ST   X,R21
                 ; 0000 01A0     return '\r'; // Report programming OK
003e57 e0ed      	LDI  R30,LOW(13)
003e58 c001      	RJMP _0x2060002
                 ; 0000 01A1 }
                 ; 0000 01A2 
                 ; 0000 01A3 // Invalid memory type?
                 ; 0000 01A4 return '?';
                 _0x76:
003e59 e3ef      	LDI  R30,LOW(63)
                 _0x2060002:
003e5a 940e 3f31 	CALL __LOADLOCR6
003e5c 96ef      	ADIW R28,63
003e5d 96ef      	ADIW R28,63
003e5e 962d      	ADIW R28,13
003e5f 9508      	RET
                 ; 0000 01A5 }
                 ; .FEND
                 ;
                 ;
                 ;void BlockRead(unsigned int size, unsigned char mem, ADDR_t *address)
                 ; 0000 01A9 {
                 _BlockRead:
                 ; .FSTART _BlockRead
                 ; 0000 01AA ADDR_t addr=*address;
                 ; 0000 01AB 
                 ; 0000 01AC // EEPROM memory type.
                 ; 0000 01AD if (mem=='E') // Read EEPROM
003e60 93ba      	ST   -Y,R27
003e61 93aa      	ST   -Y,R26
003e62 931a      	ST   -Y,R17
003e63 930a      	ST   -Y,R16
                 ;	size -> Y+5
                 ;	mem -> Y+4
                 ;	*address -> Y+2
                 ;	addr -> R16,R17
003e64 81aa      	LDD  R26,Y+2
003e65 81bb      	LDD  R27,Y+2+1
003e66 940e 3f09 	CALL __GETW1P
003e68 018f      	MOVW R16,R30
003e69 81ac      	LDD  R26,Y+4
003e6a 34a5      	CPI  R26,LOW(0x45)
003e6b f479      	BRNE _0x7D
                 ; 0000 01AE {
                 ; 0000 01AF     do
                 _0x7F:
                 ; 0000 01B0     {
                 ; 0000 01B1         putchar(*((eeprom unsigned char *) addr++)); // Transmit EEPROM data to PC
003e6c 01d8      	MOVW R26,R16
                +
003e6d 5f0f     +SUBI R16 , LOW ( - 1 )
003e6e 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
003e6f 940e 3f0d 	CALL __EEPROMRDB
003e71 2fae      	MOV  R26,R30
003e72 940e 3ebd 	CALL _putchar
                 ; 0000 01B2     } while (--size); // Repeat until all block has been read
003e74 81ed      	LDD  R30,Y+5
003e75 81fe      	LDD  R31,Y+5+1
003e76 9731      	SBIW R30,1
003e77 83ed      	STD  Y+5,R30
003e78 83fe      	STD  Y+5+1,R31
003e79 f791      	BRNE _0x7F
                 ; 0000 01B3     *address=addr;
003e7a c012      	RJMP _0x87
                 ; 0000 01B4 }
                 ; 0000 01B5 
                 ; 0000 01B6 // Flash memory type.
                 ; 0000 01B7 else if(mem=='F')
                 _0x7D:
003e7b 81ac      	LDD  R26,Y+4
003e7c 34a6      	CPI  R26,LOW(0x46)
003e7d f499      	BRNE _0x82
                 ; 0000 01B8 {
                 ; 0000 01B9     addr <<= 1; // Convert address to bytes temporarily.
003e7e 0f00      	LSL  R16
003e7f 1f11      	ROL  R17
                 ; 0000 01BA 
                 ; 0000 01BB     do
                 _0x84:
                 ; 0000 01BC     {
                 ; 0000 01BD         putchar( _LOAD_PROGRAM_MEMORY(addr++) );
003e80 940e 3f03 	CALL SUBOPT_0x8
                 ; 0000 01BE         putchar( _LOAD_PROGRAM_MEMORY(addr++) );
003e82 940e 3f03 	CALL SUBOPT_0x8
                 ; 0000 01BF         size -= 2; // Subtract two bytes from number of bytes to read
003e84 81ed      	LDD  R30,Y+5
003e85 81fe      	LDD  R31,Y+5+1
003e86 9732      	SBIW R30,2
003e87 83ed      	STD  Y+5,R30
003e88 83fe      	STD  Y+5+1,R31
                 ; 0000 01C0     } while (size); // Repeat until all block has been read
003e89 9730      	SBIW R30,0
003e8a f7a9      	BRNE _0x84
                 ; 0000 01C1 
                 ; 0000 01C2     addr >>= 1; // Convert address back to Flash words again.
003e8b 9516      	LSR  R17
003e8c 9507      	ROR  R16
                 ; 0000 01C3     *address=addr;
                 _0x87:
003e8d 81aa      	LDD  R26,Y+2
003e8e 81bb      	LDD  R27,Y+2+1
003e8f 930d      	ST   X+,R16
003e90 931c      	ST   X,R17
                 ; 0000 01C4 }
                 ; 0000 01C5 }
                 _0x82:
003e91 8119      	LDD  R17,Y+1
003e92 8108      	LDD  R16,Y+0
003e93 9627      	ADIW R28,7
003e94 9508      	RET
                 ; .FEND
                 ;
                 ;//******************************************************************************
                 ;// Bootloader based on Atmel application note AVR109 communication protocol
                 ;//
                 ;// (C) 2010-2012 Pavel Haiduc, HP InfoTech s.r.l.,
                 ;// All rights reserved
                 ;//
                 ;// Compiler: CodeVisionAVR V2.60+
                 ;// Version: 1.00
                 ;//******************************************************************************
                 ;
                 ;#include "defines.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                      #define WR_SPMCR_REG_R22 out 0x37,r22
                 ;
                 ;#pragma warn-
                 ;
                 ;unsigned char __AddrToZByteToSPMCR_LPM(void flash *addr, unsigned char ctrl)
                 ; 0001 0010 {
                 
                 	.CSEG
                 ___AddrToZByteToSPMCR_LPM:
                 ; .FSTART ___AddrToZByteToSPMCR_LPM
                 ; 0001 0011 #asm
003e95 93aa      	ST   -Y,R26
                 ;	*addr -> Y+1
                 ;	ctrl -> Y+0
                 ; 0001 0012      ldd  r30,y+1
003e96 81e9           ldd  r30,y+1
                 ; 0001 0013      ldd  r31,y+2
003e97 81fa           ldd  r31,y+2
                 ; 0001 0014      ld   r22,y
003e98 8168           ld   r22,y
                 ; 0001 0015      WR_SPMCR_REG_R22
003e99 bf67           WR_SPMCR_REG_R22
                 ; 0001 0016      lpm
003e9a 95c8           lpm
                 ; 0001 0017      mov  r30,r0
003e9b 2de0           mov  r30,r0
003e9c c017      	RJMP _0x2060001
                 ; 0001 0018 #endasm
                 ; 0001 0019 }
                 ; .FEND
                 ;
                 ;void __DataToR0ByteToSPMCR_SPM(unsigned char data, unsigned char ctrl)
                 ; 0001 001C {
                 ___DataToR0ByteToSPMCR_SPM:
                 ; .FSTART ___DataToR0ByteToSPMCR_SPM
                 ; 0001 001D #asm
003e9d 93aa      	ST   -Y,R26
                 ;	data -> Y+1
                 ;	ctrl -> Y+0
                 ; 0001 001E      ldd  r0,y+1
003e9e 8009           ldd  r0,y+1
                 ; 0001 001F      ld   r22,y
003e9f 8168           ld   r22,y
                 ; 0001 0020      WR_SPMCR_REG_R22
003ea0 bf67           WR_SPMCR_REG_R22
                 ; 0001 0021      spm
003ea1 95e8           spm
                 ; 0001 0022 #endasm
                 ; 0001 0023 }
003ea2 9622      	ADIW R28,2
003ea3 9508      	RET
                 ; .FEND
                 ;
                 ;void __AddrToZWordToR1R0ByteToSPMCR_SPM(void flash *addr, unsigned int data, unsigned char ctrl)
                 ; 0001 0026 {
                 ___AddrToZWordToR1R0ByteToSPMCR_SPM:
                 ; .FSTART ___AddrToZWordToR1R0ByteToSPMCR_SPM
                 ; 0001 0027 #asm
003ea4 93aa      	ST   -Y,R26
                 ;	*addr -> Y+3
                 ;	data -> Y+1
                 ;	ctrl -> Y+0
                 ; 0001 0028      ldd  r30,y+3
003ea5 81eb           ldd  r30,y+3
                 ; 0001 0029      ldd  r31,y+4
003ea6 81fc           ldd  r31,y+4
                 ; 0001 002A      ldd  r0,y+1
003ea7 8009           ldd  r0,y+1
                 ; 0001 002B      ldd  r1,y+2
003ea8 801a           ldd  r1,y+2
                 ; 0001 002C      ld   r22,y
003ea9 8168           ld   r22,y
                 ; 0001 002D      WR_SPMCR_REG_R22
003eaa bf67           WR_SPMCR_REG_R22
                 ; 0001 002E      spm
003eab 95e8           spm
                 ; 0001 002F #endasm
                 ; 0001 0030 }
003eac 9625      	ADIW R28,5
003ead 9508      	RET
                 ; .FEND
                 ;
                 ;void __AddrToZByteToSPMCR_SPM(void flash *addr, unsigned char ctrl)
                 ; 0001 0033 {
                 ___AddrToZByteToSPMCR_SPM:
                 ; .FSTART ___AddrToZByteToSPMCR_SPM
                 ; 0001 0034 #asm
003eae 93aa      	ST   -Y,R26
                 ;	*addr -> Y+1
                 ;	ctrl -> Y+0
                 ; 0001 0035      ldd  r30,y+1
003eaf 81e9           ldd  r30,y+1
                 ; 0001 0036      ldd  r31,y+2
003eb0 81fa           ldd  r31,y+2
                 ; 0001 0037      ld   r22,y
003eb1 8168           ld   r22,y
                 ; 0001 0038      WR_SPMCR_REG_R22
003eb2 bf67           WR_SPMCR_REG_R22
                 ; 0001 0039      spm
003eb3 95e8           spm
                 _0x2060001:
                 ; 0001 003A #endasm
                 ; 0001 003B }
003eb4 9623      	ADIW R28,3
003eb5 9508      	RET
                 ; .FEND
                 ;
                 ;void __AddrToZ24WordToR1R0ByteToSPMCR_SPM(void flash *addr, unsigned int data, unsigned char ctrl)
                 ; 0001 003E {
                 ; 0001 003F #asm
                 ;	*addr -> Y+3
                 ;	data -> Y+1
                 ;	ctrl -> Y+0
                 ; 0001 0040      ldd  r30,y+3
                 ; 0001 0041      ldd  r31,y+4
                 ; 0001 0042      ldd  r22,y+5
                 ; 0001 0043      out  rampz,r22
                 ; 0001 0044      ldd  r0,y+1
                 ; 0001 0045      ldd  r1,y+2
                 ; 0001 0046      ld   r22,y
                 ; 0001 0047      WR_SPMCR_REG_R22
                 ; 0001 0048      spm
                 ; 0001 0049 #endasm
                 ; 0001 004A }
                 ;
                 ;void __AddrToZ24ByteToSPMCR_SPM(void flash *addr, unsigned char ctrl)
                 ; 0001 004D {
                 ; 0001 004E #asm
                 ;	*addr -> Y+1
                 ;	ctrl -> Y+0
                 ; 0001 004F      ldd  r30,y+1
                 ; 0001 0050      ldd  r31,y+2
                 ; 0001 0051      ldd  r22,y+3
                 ; 0001 0052      out  rampz,r22
                 ; 0001 0053      ld   r22,y
                 ; 0001 0054      WR_SPMCR_REG_R22
                 ; 0001 0055      spm
                 ; 0001 0056 #endasm
                 ; 0001 0057 }
                 ;
                 ;#ifdef _WARNINGS_ON_
                 ;#pragma warn+
                 ;#endif
                 ;
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _getchar:
                 ; .FSTART _getchar
                 _0x2000003:
003eb6 91e0 00c0 	LDS  R30,192
003eb8 78e0      	ANDI R30,LOW(0x80)
003eb9 f3e1      	BREQ _0x2000003
003eba 91e0 00c6 	LDS  R30,198
003ebc 9508      	RET
                 ; .FEND
                 _putchar:
                 ; .FSTART _putchar
003ebd 93aa      	ST   -Y,R26
                 _0x2000006:
003ebe 91e0 00c0 	LDS  R30,192
003ec0 72e0      	ANDI R30,LOW(0x20)
003ec1 f3e1      	BREQ _0x2000006
003ec2 81e8      	LD   R30,Y
003ec3 93e0 00c6 	STS  198,R30
003ec5 9621      	ADIW R28,1
003ec6 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
003ec7 e9ee      	LDI  R30,LOW(158)
003ec8 93e0 0085 	STS  133,R30
003eca e5e8      	LDI  R30,LOW(88)
003ecb 93e0 0084 	STS  132,R30
003ecd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
003ece e0e0      	LDI  R30,LOW(0)
003ecf 93e0 0081 	STS  129,R30
003ed1 93e0 006f 	STS  111,R30
003ed3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2:
003ed4 940e 3eb6 	CALL _getchar
003ed6 2f3e      	MOV  R19,R30
003ed7 940e 3eb6 	CALL _getchar
003ed9 2f2e      	MOV  R18,R30
003eda 933a      	ST   -Y,R19
003edb 932a      	ST   -Y,R18
003edc 940e 3eb6 	CALL _getchar
003ede 93ea      	ST   -Y,R30
003edf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
003ee0 e0e0      	LDI  R30,LOW(0)
003ee1 93ea      	ST   -Y,R30
003ee2 e1a1      	LDI  R26,LOW(17)
003ee3 940c 3e9d 	JMP  ___DataToR0ByteToSPMCR_SPM
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
003ee5 93fa      	ST   -Y,R31
003ee6 93ea      	ST   -Y,R30
003ee7 e0a9      	LDI  R26,LOW(9)
003ee8 940e 3e95 	CALL ___AddrToZByteToSPMCR_LPM
003eea 2fae      	MOV  R26,R30
003eeb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x5:
                +
003eec 01de     +MOVW R26 , R28
003eed 57aa     +SUBI R26 , LOW ( - 134 )
003eee 4fbf     +SBCI R27 , HIGH ( - 134 )
003eef 900d     +LD R0 , X +
003ef0 91bc     +LD R27 , X
003ef1 2da0     +MOV R26 , R0
                 	__GETW2SX 134
003ef2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
                +
003ef3 01fe     +MOVW R30 , R28
003ef4 57e7     +SUBI R30 , LOW ( - 137 )
003ef5 4fff     +SBCI R31 , HIGH ( - 137 )
003ef6 9001     +LD R0 , Z +
003ef7 81f0     +LD R31 , Z
003ef8 2de0     +MOV R30 , R0
                 	__GETW1SX 137
003ef9 172e      	CP   R18,R30
003efa 073f      	CPC  R19,R31
003efb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
                +
003efc 01fe     +MOVW R30 , R28
003efd 57e7     +SUBI R30 , LOW ( - 137 )
003efe 4fff     +SBCI R31 , HIGH ( - 137 )
003eff 9001     +LD R0 , Z +
003f00 81f0     +LD R31 , Z
003f01 2de0     +MOV R30 , R0
                 	__GETW1SX 137
003f02 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
003f03 01f8      	MOVW R30,R16
                +
003f04 5f0f     +SUBI R16 , LOW ( - 1 )
003f05 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
003f06 91a4      	LPM  R26,Z
003f07 940c 3ebd 	JMP  _putchar
                 
                 
                 	.CSEG
                 __GETW1P:
003f09 91ed      	LD   R30,X+
003f0a 91fc      	LD   R31,X
003f0b 9711      	SBIW R26,1
003f0c 9508      	RET
                 
                 __EEPROMRDB:
003f0d 99f9      	SBIC EECR,EEWE
003f0e cffe      	RJMP __EEPROMRDB
003f0f 93ff      	PUSH R31
003f10 b7ff      	IN   R31,SREG
003f11 94f8      	CLI
003f12 bda1      	OUT  EEARL,R26
003f13 bdb2      	OUT  EEARH,R27
003f14 9af8      	SBI  EECR,EERE
003f15 b5e0      	IN   R30,EEDR
003f16 bfff      	OUT  SREG,R31
003f17 91ff      	POP  R31
003f18 9508      	RET
                 
                 __EEPROMWRB:
003f19 9bf9      	SBIS EECR,EEWE
003f1a c002      	RJMP __EEPROMWRB1
003f1b 95a8      	WDR
003f1c cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
003f1d b79f      	IN   R25,SREG
003f1e 94f8      	CLI
003f1f bda1      	OUT  EEARL,R26
003f20 bdb2      	OUT  EEARH,R27
003f21 9af8      	SBI  EECR,EERE
003f22 b580      	IN   R24,EEDR
003f23 17e8      	CP   R30,R24
003f24 f019      	BREQ __EEPROMWRB0
003f25 bde0      	OUT  EEDR,R30
003f26 9afa      	SBI  EECR,EEMWE
003f27 9af9      	SBI  EECR,EEWE
                 __EEPROMWRB0:
003f28 bf9f      	OUT  SREG,R25
003f29 9508      	RET
                 
                 __SAVELOCR6:
003f2a 935a      	ST   -Y,R21
                 __SAVELOCR5:
003f2b 934a      	ST   -Y,R20
                 __SAVELOCR4:
003f2c 933a      	ST   -Y,R19
                 __SAVELOCR3:
003f2d 932a      	ST   -Y,R18
                 __SAVELOCR2:
003f2e 931a      	ST   -Y,R17
003f2f 930a      	ST   -Y,R16
003f30 9508      	RET
                 
                 __LOADLOCR6:
003f31 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
003f32 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
003f33 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
003f34 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
003f35 8119      	LDD  R17,Y+1
003f36 8108      	LD   R16,Y
003f37 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :   9 r1 :   1 r2 :   0 r3 :   0 r4 :   0 r5 :   4 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  34 r17:  25 r18:  15 r19:  14 r20:  12 r21:  41 r22:   8 r23:   0 
r24:   6 r25:   3 r26:  98 r27:  19 r28:  20 r29:   1 r30: 154 r31:  37 
x  :  20 y  :  78 z  :   7 
Registers used: 21 out of 35 (60.0%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   2 
adiw  :  12 and   :   0 andi  :   3 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  11 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  34 brpl  :   0 brsh  :   3 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  70 
cbi   :   0 cbr   :   1 clc   :   0 clh   :   0 cli   :   4 cln   :   0 
clr   :   3 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   2 cpc   :   3 cpi   :  36 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  23 inc   :   0 jmp   :  30 ld    :  21 ldd   :  26 ldi   :  88 
lds   :   5 lpm   :   9 lsl   :   6 lsr   :   2 mov   :  18 movw  :  19 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  21 pop   :   9 push  :   9 rcall :   2 ret   :  19 
reti  :   1 rjmp  :  52 rol   :   6 ror   :   2 sbc   :   0 sbci  :  17 
sbi   :   4 sbic  :   1 sbis  :   1 sbiw  :  12 sbr   :   0 sbrc  :  13 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   6 
st    :  51 std   :   4 sts   :  15 sub   :   0 subi  :  17 swap  :   0 
tst   :   2 wdr   :   2 
Instructions used: 50 out of 116 (43.1%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x007800 0x007e70   1630     18   1648   32768   5.0%
[.dseg] 0x000100 0x000300      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 1 warnings
