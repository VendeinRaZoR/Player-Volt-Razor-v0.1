;//******************************************************************************
;// Bootloader based on Atmel application note AVR109 communication protocol
;// Target chips: ATmega168/328
;// Chip clock frequency: 16MHz specified in the project configuration.
;//
;// (C) 2010-2012 Pavel Haiduc, HP InfoTech s.r.l.,
;// All rights reserved
;//
;// Compiler: CodeVisionAVR V2.60+
;// Version: 1.00
;//******************************************************************************
;
;/*
;The bootloader expects to receive the '@' character in the first
;5 seconds after reset and enters the bootloader mode and
;responds with a '\r' character.
;If the above condition is not met, execution starts from address 0.
;
;It can be tested with the included avr109test.exe program.
;*/
;
;#include "defines.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
     #define WR_SPMCR_REG_R22 out 0x37,r22
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;#include "flash.h"
;#include <stdio.h>
;
;// Baud rate used for communication with the bootloader
;#define	BAUD_RATE 115200
;// baud rate register value calculation
;#define	BRREG_VALUE	(_MCU_CLOCK_FREQUENCY_/(8*BAUD_RATE)-1)
;
;#define STARTUP_CHAR '@' // character used to start bootloader mode
;#define STARTUP_DELAY 5  // period during which the bootloader expects
;                         // to receive the STARTUP_CHAR character
;                         // to enter bootloader mode
;#define TIMER1_OVF_PERIOD 100 // time period between two timer 1 overflows [ms]
;#define TIMER1_CLK_DIV 64 // value for timer 1 clock division coeficient
;#define TIMER1_CNT_INIT (65536-(_MCU_CLOCK_FREQUENCY_*TIMER1_OVF_PERIOD)/(TIMER1_CLK_DIV*1000))
;
;// BLOCKSIZE should be chosen so that the following holds: BLOCKSIZE*n = PAGESIZE,  where n=1,2,3...
;#define BLOCKSIZE PAGESIZE
;
;unsigned char startup_delay_cnt;
;
;// Timer1 overflow interrupt service routine
;// Occurs every 100 ms
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 002F {

	.CSEG
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0030 // Reinitialize Timer1 value
; 0000 0031 TCNT1H=TIMER1_CNT_INIT >> 8;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0032 TCNT1L=TIMER1_CNT_INIT & 0xff;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0033 // decrement the startup delay counter
; 0000 0034 if (startup_delay_cnt) --startup_delay_cnt;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0035 }
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;
;unsigned char BlockLoad(unsigned int size, unsigned char mem, ADDR_t *address);
;void BlockRead(unsigned int size, unsigned char mem, ADDR_t *address);
;
;void main(void)
; 0000 003B {
;PCODE: $0000001D VOL: 0
; 0000 003C ADDR_t address;
; 0000 003D unsigned int temp_int;
; 0000 003E unsigned char val;
; 0000 003F 
; 0000 0040 // Initialize USART
; 0000 0041 UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (1<<U2X0) | (0<<MPCM0);
;	address -> R16,R17
;	temp_int -> R18,R19
;	val -> R21
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0042 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0043 UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0044 UBRR0H=BRREG_VALUE >> 8;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0045 UBRR0L=BRREG_VALUE & 0xFF;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0046 
; 0000 0047 // Timer/Counter 1 initialization
; 0000 0048 // Clock source: System Clock
; 0000 0049 // Clock divisor: 64
; 0000 004A // Mode: Normal top=0xFFFF
; 0000 004B // Timer Period: 100 ms
; 0000 004C // Timer1 Overflow Interrupt: On
; 0000 004D TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 004E TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 004F TCNT1H=TIMER1_CNT_INIT >> 8;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0050 TCNT1L=TIMER1_CNT_INIT & 0xFF;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0051 
; 0000 0052 // Timer/Counter 1 Interrupt(s) initialization
; 0000 0053 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (1<<TOIE1);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0054 
; 0000 0055 startup_delay_cnt=STARTUP_DELAY*10;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0056 
; 0000 0057 // Global enable interrupts
; 0000 0058 #asm("sei")
;PCODE: $00000034 VOL: 0
	sei
;PCODE: $00000035 VOL: 0
; 0000 0059 
; 0000 005A // wait to receive the '@' character
; 0000 005B while (startup_delay_cnt)
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 005C       {
; 0000 005D       if (UCSR0A & (1<<RXC0))
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 005E          if (UDR0==STARTUP_CHAR) goto enter_bootloader_mode;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 005F       }
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0060 
; 0000 0061 // the startup delay elapsed without having received the
; 0000 0062 // STARTUP_CHAR character, so start execution from the application section
; 0000 0063 // stop Timer 1 as it's not needed anymore
; 0000 0064 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0065 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0066 
; 0000 0067 start_application:
;PCODE: $00000048 VOL: 0
; 0000 0068 // disable interrupts
; 0000 0069 #asm("cli")
;PCODE: $00000049 VOL: 0
	cli
;PCODE: $0000004A VOL: 0
; 0000 006A 
; 0000 006B #pragma optsize-
; 0000 006C // will use the interrupt vectors from the application section
; 0000 006D MCUCR=(1<<IVCE);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 006E MCUCR=(0<<IVSEL) | (0<<IVCE);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 006F #ifdef _OPTIMIZE_SIZE_
; 0000 0070 #pragma optsize+
; 0000 0071 #endif
; 0000 0072 
; 0000 0073 // start execution from address 0
; 0000 0074 #asm("jmp 0")
;PCODE: $0000004F VOL: 0
	jmp 0
;PCODE: $00000050 VOL: 0
; 0000 0075 
; 0000 0076 enter_bootloader_mode:
;PCODE: $00000051 VOL: 0
; 0000 0077 // stop Timer 1 as it's not needed anymore
; 0000 0078 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0079 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 007A 
; 0000 007B // send confirmation response
; 0000 007C putchar('\r');
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 007D 
; 0000 007E // main loop
; 0000 007F while (1)
;PCODE: $00000058 VOL: 0
; 0000 0080     {
; 0000 0081         val=getchar(); // Wait for command character.
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0082 
; 0000 0083         // Check autoincrement status.
; 0000 0084         if(val=='a')
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0085         {
; 0000 0086             putchar('Y'); // Yes, we do autoincrement.
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0087         }
; 0000 0088 
; 0000 0089 
; 0000 008A         // Set address.
; 0000 008B         else if(val=='A') // Set address...
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 008C         { // NOTE: Flash addresses are given in words, not bytes.
; 0000 008D             // Read address high and low byte.
; 0000 008E             ((unsigned char *) &address)[1] = getchar(); // MSB
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 008F             ((unsigned char *) &address)[0] = getchar(); // LSB
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0090             putchar('\r'); // Send OK back.
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0091         }
; 0000 0092 
; 0000 0093 
; 0000 0094         // Chip erase.
; 0000 0095         else if(val=='e')
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0096         {
; 0000 0097             for(address = 0; address < APP_END;address += PAGESIZE)
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0098             { // NOTE: Here we use address as a byte-address, not word-address, for convenience.
; 0000 0099                 _WAIT_FOR_SPM();
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 009A                 _PAGE_ERASE( address );
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 009B             }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 009C 
; 0000 009D             putchar('\r'); // Send OK back.
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 009E         }
; 0000 009F 
; 0000 00A0         // Check block load support.
; 0000 00A1         else if(val=='b')
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00A2         {
; 0000 00A3             putchar('Y'); // Report block load supported.
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00A4             putchar((BLOCKSIZE>>8) & 0xFF); // MSB first.
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00A5             putchar(BLOCKSIZE&0xFF); // Report BLOCKSIZE (bytes).
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00A6         }
; 0000 00A7 
; 0000 00A8 
; 0000 00A9         // Start block load.
; 0000 00AA         else if(val=='B')
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00AB         {
; 0000 00AC             // Get block size.
; 0000 00AD             ((unsigned char *) &temp_int)[1] = getchar(); // MSB
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00AE             ((unsigned char *) &temp_int)[0] = getchar(); // LSB
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00AF             putchar( BlockLoad(temp_int,getchar() /* Get mem. type */,&address) ); // Block load.
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00B0         }
; 0000 00B1 
; 0000 00B2         // Start block read.
; 0000 00B3         else if(val=='g')
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00B4         {
; 0000 00B5             // Get block size.
; 0000 00B6             ((unsigned char *) &temp_int)[1] = getchar(); // MSB
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00B7             ((unsigned char *) &temp_int)[0] = getchar(); // LSB
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00B8             BlockRead(temp_int,getchar() /* Get mem. type */,&address); // Block read
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00B9         }
; 0000 00BA 
; 0000 00BB         // Read program memory.
; 0000 00BC         else if(val=='R')
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00BD         {
; 0000 00BE             // Send high byte, then low byte of flash word.
; 0000 00BF             _WAIT_FOR_SPM();
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00C0             _ENABLE_RWW_SECTION();
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00C1             putchar( _LOAD_PROGRAM_MEMORY( (address << 1)+1 ) );
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00C2             putchar( _LOAD_PROGRAM_MEMORY( (address << 1)+0 ) );
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00C3 
; 0000 00C4             address++; // Auto-advance to next Flash word.
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00C5         }
; 0000 00C6 
; 0000 00C7 
; 0000 00C8         // Write program memory, low byte.
; 0000 00C9         else if(val=='c')
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00CA         { // NOTE: Always use this command before sending high byte.
; 0000 00CB             temp_int=getchar(); // Get low byte for later _FILL_TEMP_WORD.
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00CC             putchar('\r'); // Send OK back.
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00CD         }
; 0000 00CE 
; 0000 00CF 
; 0000 00D0         // Write program memory, high byte.
; 0000 00D1         else if(val=='C')
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00D2         {
; 0000 00D3             // Get and insert high byte.
; 0000 00D4             ((unsigned char *) &temp_int)[1] = getchar(); // MSB
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00D5             _WAIT_FOR_SPM();
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00D6             _FILL_TEMP_WORD( (address << 1), temp_int ); // Convert word-address to byte-address and fill.
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00D7             address++; // Auto-advance to next Flash word.
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00D8             putchar('\r'); // Send OK back.
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00D9         }
; 0000 00DA 
; 0000 00DB 
; 0000 00DC         // Write page.
; 0000 00DD         else if(val== 'm')
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00DE         {
; 0000 00DF             if( address >= (APP_END>>1) ) // Protect bootloader area.
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00E0             {
; 0000 00E1                 putchar('?');
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00E2             }
; 0000 00E3             else
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00E4             {
; 0000 00E5                 _WAIT_FOR_SPM();
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00E6                 _PAGE_WRITE( address << 1 ); // Convert word-address to byte-address and write.
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00E7             }
;PCODE: $00000113 VOL: 0
; 0000 00E8 
; 0000 00E9             putchar('\r'); // Send OK back.
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00EA         }
; 0000 00EB 
; 0000 00EC         // Write EEPROM memory.
; 0000 00ED         else if (val == 'D')
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00EE         {
; 0000 00EF             _WAIT_FOR_SPM();
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00F0             *((eeprom unsigned char *) address) = getchar(); // Write received byte.
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00F1             address++; // Auto-advance to next EEPROM byte.
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00F2             putchar('\r');// Send OK back.
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00F3         }
; 0000 00F4 
; 0000 00F5 
; 0000 00F6         // Read EEPROM memory.
; 0000 00F7         else if (val == 'd')
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00F8         {
; 0000 00F9             putchar(*((eeprom unsigned char *) address)); // Read byte send it back.
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00FA             address++; // Auto-advance to next EEPROM byte.
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 00FB         }
; 0000 00FC 
; 0000 00FD         // Write lockbits.
; 0000 00FE         else if(val=='l')
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00FF         {
; 0000 0100             _WAIT_FOR_SPM();
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 0101             _SET_LOCK_BITS( getchar() ); // Read and set lock bits.
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 0102             putchar('\r'); // Send OK back.
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 0103         }
; 0000 0104 
; 0000 0105 
; 0000 0106         // Read lock bits.
; 0000 0107         else if(val=='r')
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 0108         {
; 0000 0109             _WAIT_FOR_SPM();
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 010A             putchar( _GET_LOCK_BITS() );
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 010B         }
; 0000 010C 
; 0000 010D 
; 0000 010E         // Read fuse bits.
; 0000 010F         else if(val=='F')
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 0110         {
; 0000 0111             _WAIT_FOR_SPM();
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 0112             putchar( _GET_LOW_FUSES() );
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 0113         }
; 0000 0114 
; 0000 0115 
; 0000 0116         // Read high fuse bits.
; 0000 0117         else if(val=='N')
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0118         {
; 0000 0119             _WAIT_FOR_SPM();
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 011A             putchar( _GET_HIGH_FUSES() );
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 011B         }
; 0000 011C 
; 0000 011D 
; 0000 011E         // Read extended fuse bits.
; 0000 011F         else if(val=='Q')
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 0120         {
; 0000 0121             _WAIT_FOR_SPM();
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 0122             putchar( _GET_EXTENDED_FUSES() );
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 0123         }
; 0000 0124 
; 0000 0125         // Enter and leave programming mode.
; 0000 0126         else if((val=='P')||(val=='L'))
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 0127         {
; 0000 0128             putchar('\r'); // Nothing special to do, just answer OK.
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 0129         }
; 0000 012A 
; 0000 012B 
; 0000 012C         // Exit bootloader.
; 0000 012D         else if(val=='E')
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 012E         {
; 0000 012F             _WAIT_FOR_SPM();
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 0130             _ENABLE_RWW_SECTION();
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 0131             putchar('\r');
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 0132             // Jump to Reset vector 0x0000 in Application Section.
; 0000 0133             goto start_application;
;PCODE: $000001AC VOL: 0
; 0000 0134         }
; 0000 0135 
; 0000 0136 
; 0000 0137         // Get programmer type.
; 0000 0138         else if (val=='p')
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 0139         {
; 0000 013A             putchar('S'); // Answer 'SERIAL'.
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 013B         }
; 0000 013C 
; 0000 013D 
; 0000 013E         // Return supported device codes.
; 0000 013F         else if(val=='t')
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 0140         {
; 0000 0141             putchar( PARTCODE ); // Supports only this device, of course.
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 0142             putchar( 0 ); // Send list terminator.
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 0143         }
; 0000 0144 
; 0000 0145 
; 0000 0146         // Set LED, clear LED and set device type.
; 0000 0147         else if((val=='x')||(val=='y')||(val=='T'))
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 0148         {
; 0000 0149             getchar(); // Ignore the command and it's parameter.
;PCODE: $000001C9 VOL: 0
; 0000 014A             putchar('\r'); // Send OK back.
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 014B         }
; 0000 014C 
; 0000 014D         // Return programmer identifier.
; 0000 014E         else if(val=='S')
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 014F         {
; 0000 0150             putchar('A'); // Return 'AVRBOOT'.
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 0151             putchar('V'); // Software identifier (aka programmer signature) is always 7 characters.
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 0152             putchar('R');
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 0153             putchar('B');
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 0154             putchar('O');
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 0155             putchar('O');
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 0156             putchar('T');
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 0157         }
; 0000 0158 
; 0000 0159         // Return software version.
; 0000 015A         else if(val=='V')
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 015B         {
; 0000 015C             putchar('1');
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 015D             putchar('0');
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 015E         }
; 0000 015F 
; 0000 0160         // Return signature bytes.
; 0000 0161         else if(val=='s')
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 0162         {
; 0000 0163             putchar( SIGNATURE_BYTE_3 );
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 0164             putchar( SIGNATURE_BYTE_2 );
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 0165             putchar( SIGNATURE_BYTE_1 );
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 0166         }
; 0000 0167 
; 0000 0168         // The last command to accept is ESC (synchronization).
; 0000 0169         else if(val!=0x1b)                  // If not ESC, then it is unrecognized...
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 016A         {
; 0000 016B             putchar('?');
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 016C         }
; 0000 016D     }
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 016E 
; 0000 016F }
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;
;unsigned char BlockLoad(unsigned int size, unsigned char mem, ADDR_t *address)
; 0000 0172 {
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 0173 unsigned int data;
; 0000 0174 ADDR_t tempaddress,addr;
; 0000 0175 unsigned char buffer[BLOCKSIZE];
; 0000 0176 
; 0000 0177 addr=*address;
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;	size -> Y+137
;	mem -> Y+136
;	*address -> Y+134
;	data -> R16,R17
;	tempaddress -> R18,R19
;	addr -> R20,R21
;	buffer -> Y+6
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 0178 
; 0000 0179 // EEPROM memory type.
; 0000 017A if(mem=='E')
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0000 017B {
; 0000 017C     /* Fill buffer first, as EEPROM is too slow to copy with UART speed */
; 0000 017D     for(tempaddress=0;tempaddress<size;tempaddress++)
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 017E         buffer[tempaddress] = getchar();
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 0180 while( SPMCSR & (1<<0       ) );;
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 0181     /* Then program the EEPROM */
; 0000 0182     for( tempaddress=0; tempaddress < size; tempaddress++)
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 0183     {
; 0000 0184         *((eeprom unsigned char *) addr++) = buffer[tempaddress]; // Write byte.
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0000 0185     }
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0000 0186 
; 0000 0187     *address=addr;
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 0188     return '\r'; // Report programming OK
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0000 0189 }
; 0000 018A 
; 0000 018B // Flash memory type.
; 0000 018C if(mem=='F')
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0000 018D { // NOTE: For flash programming, 'address' is given in words.
; 0000 018E     addr <<= 1; // Convert address to bytes temporarily.
;PCODE: $0000025F VOL: 0
; 0000 018F     tempaddress = addr;  // Store address in page.
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0000 0190 
; 0000 0191     do
;PCODE: $00000262 VOL: 0
; 0000 0192     {
; 0000 0193         ((unsigned char *) &data)[0] = getchar(); // LSB
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0000 0194         ((unsigned char *) &data)[1] = getchar(); // MSB
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0000 0195         _FILL_TEMP_WORD(addr,data);
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0000 0196         addr += 2; // Select next word in memory.
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0000 0197         size -= 2; // Reduce number of bytes to write by two.
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0000 0198     } while(size); // Loop until all bytes written.
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0000 0199 
; 0000 019A     _PAGE_WRITE(tempaddress);
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
; 0000 019B     _WAIT_FOR_SPM();
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 019C     _ENABLE_RWW_SECTION();
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0000 019D 
; 0000 019E     addr >>= 1; // Convert address back to Flash words again.
;PCODE: $00000284 VOL: 0
; 0000 019F     *address=addr;
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0000 01A0     return '\r'; // Report programming OK
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0000 01A1 }
; 0000 01A2 
; 0000 01A3 // Invalid memory type?
; 0000 01A4 return '?';
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 01A5 }
;PCODE: $00000290 VOL: 0
;
;
;void BlockRead(unsigned int size, unsigned char mem, ADDR_t *address)
; 0000 01A9 {
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0000 01AA ADDR_t addr=*address;
; 0000 01AB 
; 0000 01AC // EEPROM memory type.
; 0000 01AD if (mem=='E') // Read EEPROM
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;	size -> Y+5
;	mem -> Y+4
;	*address -> Y+2
;	addr -> R16,R17
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0000 01AE {
; 0000 01AF     do
;PCODE: $0000029C VOL: 0
; 0000 01B0     {
; 0000 01B1         putchar(*((eeprom unsigned char *) addr++)); // Transmit EEPROM data to PC
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
; 0000 01B2     } while (--size); // Repeat until all block has been read
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 01B3     *address=addr;
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 01B4 }
; 0000 01B5 
; 0000 01B6 // Flash memory type.
; 0000 01B7 else if(mem=='F')
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
; 0000 01B8 {
; 0000 01B9     addr <<= 1; // Convert address to bytes temporarily.
;PCODE: $000002B1 VOL: 0
; 0000 01BA 
; 0000 01BB     do
;PCODE: $000002B2 VOL: 0
; 0000 01BC     {
; 0000 01BD         putchar( _LOAD_PROGRAM_MEMORY(addr++) );
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 01BE         putchar( _LOAD_PROGRAM_MEMORY(addr++) );
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
; 0000 01BF         size -= 2; // Subtract two bytes from number of bytes to read
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0000 01C0     } while (size); // Repeat until all block has been read
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0000 01C1 
; 0000 01C2     addr >>= 1; // Convert address back to Flash words again.
;PCODE: $000002C6 VOL: 0
; 0000 01C3     *address=addr;
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0000 01C4 }
; 0000 01C5 }
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;
